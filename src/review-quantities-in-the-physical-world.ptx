<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2019                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="review-quantities-in-the-physical-world">
  <title>Quantities in the Physical World Chapter Review</title>

  <subsection>
    <title>Scientific Notation</title>
    <p>
      In <xref ref="section-scientific-notation">Section</xref>
      we covered the definition of <xref ref="definition-scientific-notation" text="title">scientific notation</xref>,
      how to convert to and from scientific notation,
      and how to do some calculations in scientific notation.
    </p>

    <example>
      <title>Scientific Notation for Large Numbers</title>
      <statement>
        <p>
          <ol label="a.">
            <li>
              <p>
                The distance to the star Betelgeuse is about <m>3{,}780{,}000{,}000{,}000{,}000</m> miles.
                Write this number in scientific notation.
              </p>
            </li>

            <li>
              <p>
                The gross domestic product (GDP) of California in the year 2017 was about <m>\$2.746\times10^{13}</m>.
                Write this number in standard notation.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution>
        <p>
          <ol label="a.">
            <li>
              <p>
                <m>3{,}780{,}000{,}000{,}000{,}000=3.78\times10^{15}</m>.
              </p>
            </li>

            <li>
              <p>
                <m>\$2.746\times10^{13}=\$2{,}746{,}000{,}000{,}000</m>.
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <example>
      <title>Scientific Notation for Small Numbers</title>
      <statement>
        <p>
          <ol label="a.">
            <li>
              <p>
                Human DNA forms a double helix with diameter <m>2\times10^{-9}</m> meters.
                Write this number in standard notation.
              </p>
            </li>

            <li>
              <p>
                A single grain of Forget-me-not (Myosotis) pollen is about <m>0.00024</m> inches in diameter.
                Write this number in scientific notation.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution>
        <p>
          <ol label="a." cols="2">
            <li>
              <p>
                <m>2\times10^{-9}=0.000000002</m>.
              </p>
            </li>

            <li>
              <p>
                <m>0.00024=2.4\times10^{-4}</m>.
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <example>
      <title>Multiplying and Dividing Using Scientific Notation</title>
      <statement>
        <p>
          The fastest spacecraft so far have traveled about <m>5\times10^6</m> miles per day.

          <ol label="a.">
            <li>
              <p>
                If that spacecraft traveled at that same speed for <m>2\times10^4</m> days
                (which is about <m>55</m> years),
                how far would it have gone?
                Write your answer in scientific notation.
              </p>
            </li>

            <li>
              <p>
                The nearest star to Earth, besides the Sun,
                is Proxima Centauri, about <m>2.5\times10^{13}</m> miles from Earth.
                How many days would you have to fly in that spacecraft at top speed to reach Proxima Centauri
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution>
        <p>
          <ol label="a.">
            <li>
              <p>
                Remember that you can find the distance traveled by multiplying the rate of travel times the time traveled:
                <m>d=r\cdot t</m>.
                So this problem turns into
                <md>
                  <mrow>d\amp=r\cdot t</mrow>
                  <mrow>d\amp=\left(\highlight{5}\times10^6\right)\cdot \left(\highlight{2}\times10^4\right)</mrow>
                  <intertext>Multiply coefficient with coefficient and power of <m>10</m> with power of <m>10</m>.</intertext>
                  <mrow>\amp=\left(\highlight{5}\cdot\highlight{2}\right) \left(10^6\times10^4\right)</mrow>
                  <mrow>\amp=\highlight{10}\times10^{10}</mrow>
                  <intertext>Remember that this still isn't in scientific notation. So we convert like this:</intertext>
                  <mrow>\amp=\highlight{1.0\times10^1}\times10^{10}</mrow>
                  <mrow>\amp=1.0\times10^{11}</mrow>
                </md>
                So, after traveling for <m>2\times10^4</m> days (55 years),
                we will have traveled about <m>1.0\times10^{11}</m> miles.
                That's one-hundred million miles.
                I hope someone remembered the snacks.
              </p>
            </li>

            <li>
              <p>
                Since we are looking for time,
                let's solve the equation <m>d=r\cdot t</m> for <m>t</m> by dividing by <m>r</m> on both sides:
                <m>t=\frac{d}{r}</m>.
                So we have:
                <md>
                  <mrow>t\amp=\frac{d}{r}</mrow>
                  <mrow>t\amp=\frac{2.5\times10^{13}}{5\times10^6}</mrow>
                  <intertext>Now we can divide coefficient by coefficient and power of <m>10</m> with power of <m>10</m>.</intertext>
                  <mrow>t\amp=\frac{2.5}{5}\times\frac{10^{13}}{10^6}</mrow>
                  <mrow>t\amp=\highlight{0.5}\times10^7</mrow>
                  <mrow>t\amp=\highlight{5\times10^{-1}}\times10^7</mrow>
                  <mrow>t\amp=5\times10^6</mrow>
                </md>
                This means that to get to Proxima Centauri,
                even in our fastest spacecraft,
                would take <m>5\times10^6</m> years.
                Converting to standard form, this is <m>5{,}000{,}000</m> years.
                I think we're going to need a faster ship.
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>
  </subsection>

  <subsection>
    <title>Unit Conversion</title>
    <p>
      Unit conversion is a particular process that uses unit ratios to convert units.
      You may refer to <xref ref="appendix-unit-conversions">Appendix</xref>
      to find unit conversion facts needed to do these conversions.
    </p>

    <example>
      <title>Using Multiple Unit Ratios</title>
      <p>
        How many grams are in <m>5</m> pounds?
        <md>
          <mrow>5\,\text{lb}\amp=\frac{5\,\text{lb}}{1}\amp\amp\text{Rewrite as a ratio.}</mrow>
          <mrow>\amp=\frac{5\,\text{lb}}{1}\cdot\frac{1\,\text{kg}}{2.205\,\text{lb}}\cdot\frac{1000\,\text{g}}{1\,\text{kg}}\amp\amp\text{Two unit ratios are needed.}</mrow>
          <mrow>\amp=\frac{5\,\cancelhighlight{\text{lb}}}{1}\cdot\frac{1\,\secondcancelhighlight{\text{kg}}}{2.205\,\cancelhighlight{\text{lb}}}\cdot\frac{1000\,\text{g}}{1\,\secondcancelhighlight{\text{kg}}}\amp\amp\text{Units may now cancel.}</mrow>
          <mrow>\amp=\frac{5}{1}\cdot\frac{1}{2.205}\cdot\frac{1000\,\text{g}}{1}\amp\amp\text{Only units of g remain.}</mrow>
          <mrow>\amp=\frac{5\cdot1000}{2.205}\,\text{g}\amp\amp\text{Multiply what's left and then divide.}</mrow>
          <mrow>\amp\approx2268\,\text{g}</mrow>
        </md>
      </p>
      <p>
        So <m>5</m> pounds is about <m>2268</m> grams.
      </p>
    </example>
    <example>
      <title>Converting Squared or Cubed Units</title>
      <p>
        Convert <m>240</m> square inches into square centimeters.
        <md>
          <mrow>240\,\text{in}^2\amp=\frac{240\,\text{in}^2}{1}\amp\amp\text{Rewrite as a ratio.}</mrow>
          <mrow>\amp=\frac{240\,\text{in}^2}{1}\cdot\left(\frac{2.54\,\text{cm}}{1\,\text{in}}\right)^2\amp\amp\text{The unit ratio needs to be squared.}</mrow>
          <mrow>\amp=\frac{240\,\text{in}^2}{1}\cdot\frac{2.54^2\,\text{cm}^2}{1\,\text{in}^2}\amp\amp\text{Everything inside the parentheses is squared.}</mrow>
          <mrow>\amp=\frac{240\,\cancel{\text{in}^2}}{1}\cdot\frac{2.54^2\,\text{cm}^2}{1\,\cancel{\text{in}^2}}\amp\amp\text{Units may now cancel.}</mrow>
          <mrow>\amp=\frac{240}{1}\cdot\frac{2.54^2\,\text{cm}^2}{1}\amp\amp\text{Only units of sq cm remain.}</mrow>
          <mrow>\amp=240\cdot2.54^2\,\text{cm}^2\amp\amp\text{Multiply.}</mrow>
          <mrow>\amp\approx1548\,\text{cm}^2</mrow>
        </md>
      </p>
      <p>
        So <m>240</m> square inches is approximately <m>1548</m> square centimeters.
      </p>
    </example>
    <example>
      <title>Converting Rates</title>
      <p>
        Gold has a density of
        <quantity>
          <mag>19.3</mag><unit base="gram"/><per prefix="milli" base="liter"/>
        </quantity>.
        What is this density in ounces per cubic inch?
        <md>
          <mrow>19.3\,\frac{\text{g}}{\text{mL}}\amp=\frac{19.3\,\text{g}}{1\,\text{mL}}\amp\amp\text{Write the rate as a ratio.}</mrow>
          <mrow>\amp\approx\frac{19.3\,\text{g}}{1\,\text{mL}}\cdot\frac{16.39\,\text{mL}}{1\,\text{in}^3}\cdot\frac{1\,\text{oz}}{28.35\,\text{g}}\amp\amp\text{Use unit ratios to make cancellations.}</mrow>
          <mrow>\amp=\frac{19.3\,\cancelhighlight{\text{g}}}{1\,\secondcancelhighlight{\text{mL}}}\cdot\frac{16.39\,\secondcancelhighlight{\text{mL}}}{1\,\text{in}^3}\cdot\frac{1\,\text{oz}}{28.35\,\cancelhighlight{\text{g}}}\amp\amp\text{Units may now cancel.}</mrow>
          <mrow>\amp=\frac{19.3}{1}\cdot\frac{16.39}{1\,\text{in}^3}\cdot\frac{1\,\text{oz}}{28.35}\amp\amp\text{Only oz per cubic inch remain.}</mrow>
          <mrow>\amp=\frac{19.3\cdot16.39}{28.35}\,\frac{\text{oz}}{\text{in}^3}\amp\amp\text{Multiply what's left and then divide.}</mrow>
          <mrow>\amp\approx11.16\,\frac{\text{oz}}{\text{in}^3}</mrow>
        </md>
        Notice that we did not need to raise any unit ratios to a power since there is a conversion fact that tells us that <m>1\,\text{in}^3\approx16.39\,\text{mL}</m>.
      </p>
      <p>
        Thus, the density of gold is about
        <quantity>
          <mag>11.16</mag><unit base="ounce"/><per base="inch" exp="3"/>
        </quantity>.
      </p>
    </example>
  </subsection>

  <!-- Moved from edition 1's chapter review of variables, expressions, and equations -->
  <!-- Either keep the list here or refererence subsection-list-of-geometry-formulas -->
  <subsection>
    <title>Geometry Formulas</title>
    <p>
      In <xref ref="section-geometry-formulas">Section</xref>
      we established the following formulas.
      <dl>
        <li>
          <title>Perimeter of a Rectangle</title>
          <p>
            <m>P=2(\ell+w)</m>
          </p>
        </li>

        <li>
          <title>Area of a Rectangle</title>
          <p>
            <m>A=\ell w</m>
          </p>
        </li>

        <li>
          <title>Area of a Triangle</title>
          <p>
            <m>A=\frac{1}{2}bh</m>
          </p>
        </li>

        <li>
          <title>Circumference of a Circle</title>
          <p>
            <m>c=2\pi r</m>
          </p>
        </li>

        <li>
          <title>Area of a Circle</title>
          <p>
            <m>A=\pi r^2</m>
          </p>
        </li>

        <li>
          <title>Volume of a Rectangular Prism</title>
          <p>
            <m>V=wdh</m>
          </p>
        </li>

        <li>
          <title>Volume of a Cylinder</title>
          <p>
            <m>V=\pi r^2h</m>
          </p>
        </li>

        <li>
          <title>Volume of a Rectangular Prism or Cylinder</title>
          <p>
            <m>V=Bh</m>
          </p>
        </li>
      </dl>
    </p>
  </subsection>

  <exercises>
    <exercisegroup cols="2">
      <title>Scientific Notation</title>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation60.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation60.pg" />
      </exercise>
      <!-- <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation60.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation60.pg" />
      </exercise> -->
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation70.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation70.pg" />
      </exercise>

    </exercisegroup>
    <!-- <exercise>
      <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation70.pg" />
    </exercise>
    <exercise>
      <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation70.pg" />
    </exercise> -->
    <!-- <exercise>
      <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation10.pg" />
    </exercise>
    <exercise>
      <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation10.pg" />
    </exercise> -->
    <exercisegroup cols="3">

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation20.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation20.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation30.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation30.pg" />
      </exercise>
      <!-- <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation40.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation40.pg" />
      </exercise> -->
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation50.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation50.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2">

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation80.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation80.pg" />
      </exercise>

    </exercisegroup>
    <exercisegroup cols="2">
      <!-- <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation90.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation90.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation95.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation95.pg" />
      </exercise> -->
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation100.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation100.pg" />
      </exercise>
      <!-- <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation105.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation105.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation110.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation110.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation115.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation115.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation120.pg" />
      </exercise>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/NumberBasics/ScientificNotation120.pg" />
      </exercise> -->
    </exercisegroup>
    <exercisegroup cols="2">
      <title>Unit Conversion</title>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              $unitsin = list_random(lex_sort(keys %ORCCAconversions));
              $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
              my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $factor = $ORCCAconversions{$unitsin}->{$unitsout};
              $b = $a*$factor;
              $given = NumberWithUnits("$a $unitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum = ($factor > 1) ? $factor : 1;
              $factorden = ($factor > 1) ? 1 : 1/$factor;
              $factornumU = NumberWithUnits("$factornum $unitsout", {newUnit => $ORCCAunits});
              $factordenU = NumberWithUnits("$factorden $unitsin", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              $unitsin = list_random(lex_sort(keys %ORCCAconversions));
              $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
              my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $factor = $ORCCAconversions{$unitsin}->{$unitsout};
              $b = $a*$factor;
              $given = NumberWithUnits("$a $unitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum = ($factor > 1) ? $factor : 1;
              $factorden = ($factor > 1) ? 1 : 1/$factor;
              $factornumU = NumberWithUnits("$factornum $unitsout", {newUnit => $ORCCAunits});
              $factordenU = NumberWithUnits("$factorden $unitsin", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              $unitsin = list_random(lex_sort(keys %ORCCAconversions));
              $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
              my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $factor = $ORCCAconversions{$unitsin}->{$unitsout};
              $b = $a*$factor;
              $given = NumberWithUnits("$a $unitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum = ($factor > 1) ? $factor : 1;
              $factorden = ($factor > 1) ? 1 : 1/$factor;
              $factornumU = NumberWithUnits("$factornum $unitsout", {newUnit => $ORCCAunits});
              $factordenU = NumberWithUnits("$factorden $unitsin", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornumU"/>}{1\cdot <var name="$factorden"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              do {
                $unitsin = list_random(lex_sort(keys %ORCCAconversions));
                $unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
                $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
              } until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}->{$unitsout}));
              my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $factor1 = $ORCCAconversions{$unitsin}->{$unitsmid};
              $factor2 = $ORCCAconversions{$unitsmid}->{$unitsout};
              $factor = $factor1*$factor2;
              $b = $a*$factor;
              $given = NumberWithUnits("$a $unitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factor1 > 1) ? $factor1 : 1;
              $factorden1 = ($factor1 > 1) ? 1 : 1/$factor1;
              $factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit => $ORCCAunits});
              $factornum2 = ($factor2 > 1) ? $factor2 : 1;
              $factorden2 = ($factor2 > 1) ? 1 : 1/$factor2;
              $factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              do {
                $unitsin = list_random(lex_sort(keys %ORCCAconversions));
                $unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
                $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
              } until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}->{$unitsout}));
              my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $factor1 = $ORCCAconversions{$unitsin}->{$unitsmid};
              $factor2 = $ORCCAconversions{$unitsmid}->{$unitsout};
              $factor = $factor1*$factor2;
              $b = $a*$factor;
              $given = NumberWithUnits("$a $unitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factor1 > 1) ? $factor1 : 1;
              $factorden1 = ($factor1 > 1) ? 1 : 1/$factor1;
              $factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit => $ORCCAunits});
              $factornum2 = ($factor2 > 1) ? $factor2 : 1;
              $factorden2 = ($factor2 > 1) ? 1 : 1/$factor2;
              $factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              do {
                $unitsin = list_random(lex_sort(keys %ORCCAconversions));
                $unitsmid = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
                $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsmid}}));
              } until ($unitsin ne $unitsout and not defined ($ORCCAconversions{$unitsin}->{$unitsout}));
              my @alternatives = ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $factor1 = $ORCCAconversions{$unitsin}->{$unitsmid};
              $factor2 = $ORCCAconversions{$unitsmid}->{$unitsout};
              $factor = $factor1*$factor2;
              $b = $a*$factor;
              $given = NumberWithUnits("$a $unitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factor1 > 1) ? $factor1 : 1;
              $factorden1 = ($factor1 > 1) ? 1 : 1/$factor1;
              $factornum1U = NumberWithUnits("$factornum1 $unitsmid", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $unitsin", {newUnit => $ORCCAunits});
              $factornum2 = ($factor2 > 1) ? $factor2 : 1;
              $factorden2 = ($factor2 > 1) ? 1 : 1/$factor2;
              $factornum2U = NumberWithUnits("$factornum2 $unitsout", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $unitsmid", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1"/> \cdot <var name="$factornum2U"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $unitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              $dimension = list_random(2,3);
              $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
              my @alternatives = map{$_."^$dimension"} ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $dimensionWord = ($dimension == 2) ? 'square' : 'cubic';
              $factor = $ORCCAconversions{$unitsin}->{$unitsout};
              $b = $a*$factor**$dimension;
              $given = NumberWithUnits("$a $unitsin^$dimension", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout^$dimension", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum = ($factor > 1) ? $factor : 1;
              $factorden = ($factor > 1) ? 1 : 1/$factor;
              $factornumU = NumberWithUnits("$factornum $unitsout", {newUnit => $ORCCAunits});
              $factordenU = NumberWithUnits("$factorden $unitsin", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$dimensionWord"/> <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\left(\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}\right)^{<var name="$dimension"/>}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{<var name="$factorden"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsin"/>}^{<var name="$dimension"/>}}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{1\cdot <var name="$factorden"/>^{<var name="$dimension"/>}}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $digits = list_random(2,3);
              $decimals = random(0,$digits-1,1);
              $unitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
              $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
              $dimension = list_random(2,3);
              $unitsout = list_random(lex_sort(keys %{$ORCCAconversions{$unitsin}}));
              my @alternatives = map{$_."^$dimension"} ($unitsout, @{$unitAlternatives{$unitsout}});
              $word = $unitWords{$unitsout};
              $dimensionWord = ($dimension == 2) ? 'square' : 'cubic';
              $factor = $ORCCAconversions{$unitsin}->{$unitsout};
              $b = $a*$factor**$dimension;
              $given = NumberWithUnits("$a $unitsin^$dimension", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $unitsout^$dimension", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum = ($factor > 1) ? $factor : 1;
              $factorden = ($factor > 1) ? 1 : 1/$factor;
              $factornumU = NumberWithUnits("$factornum $unitsout", {newUnit => $ORCCAunits});
              $factordenU = NumberWithUnits("$factorden $unitsin", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$dimensionWord"/> <var name="$word"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$given"/>}{1}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\left(\frac{<var name="$factornumU"/>}{<var name="$factordenU"/>}\right)^{<var name="$dimension"/>}</mrow>
                <mrow>\amp=\frac{<var name="$given"/>}{1}\cdot\frac{<var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{<var name="$factorden"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsin"/>}^{<var name="$dimension"/>}}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum"/>^{<var name="$dimension"/>}\,\mathrm{<var name="$unitsout"/>}^{<var name="$dimension"/>}}{1\cdot <var name="$factorden"/>^{<var name="$dimension"/>}}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              do {
                $digits = list_random(2,3);
                $decimals = random(0,$digits-1,1);
                $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
                $numunitsin = list_random('ft','in','yd','mi','m','mm','cm','dm','dam','hm','km');
                $numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
                $denunitsin = list_random('wk','d','h','min','s','ms','ns');
                $denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
                my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
                my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
                my @alternatives;
                for my $i (@numalternatives) {
                  for my $j (@denalternatives) {
                    push(@alternatives, $i.'/'.$j);
                  };
                };
                $numword = $unitWords{$numunitsout};
                $denword = $unitWord{$denunitsout};
                $factornum = $ORCCAconversions{$numunitsin}->{$numunitsout};
                $factorden = $ORCCAconversions{$denunitsin}->{$denunitsout};
                $factor = $factornum/$factorden;
                $b = $a*$factor;
              } until (abs(log10($b)) &lt; 6);
              $given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factornum > 1) ? $factornum : 1;
              $factorden1 = ($factornum > 1) ? 1 : 1/$factornum;
              $factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit => $ORCCAunits});
              $factorden2 = ($factorden > 1) ? $factorden : 1;
              $factornum2 = ($factorden > 1) ? 1 : 1/$factorden;
              $factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              do {
                $digits = list_random(2,3);
                $decimals = random(0,$digits-1,1);
                $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
                $numunitsin = list_random('acre','ft^2','mi^2','ha','m^2','km^2');
                $numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
                $denunitsin = list_random('wk','d','h','min','s','ms','ns');
                $denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
                my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
                my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
                my @alternatives;
                for my $i (@numalternatives) {
                  for my $j (@denalternatives) {
                    push(@alternatives, $i.'/'.$j);
                  };
                };
                $numword = $unitWords{$numunitsout};
                $denword = $unitWord{$denunitsout};
                $factornum = $ORCCAconversions{$numunitsin}->{$numunitsout};
                $factorden = $ORCCAconversions{$denunitsin}->{$denunitsout};
                $factor = $factornum/$factorden;
                $b = $a*$factor;
              } until (abs(log10($b)) &lt; 6);
              $given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factornum > 1) ? $factornum : 1;
              $factorden1 = ($factornum > 1) ? 1 : 1/$factornum;
              $factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit => $ORCCAunits});
              $factorden2 = ($factorden > 1) ? $factorden : 1;
              $factornum2 = ($factorden > 1) ? 1 : 1/$factorden;
              $factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              do {
                $digits = list_random(2,3);
                $decimals = random(0,$digits-1,1);
                $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
                $numunitsin = list_random('lb','oz','T','g','mg','kg','T');
                $numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
                $denunitsin = list_random('wk','d','h','min','s','ms','ns');
                $denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
                my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
                my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
                my @alternatives;
                for my $i (@numalternatives) {
                  for my $j (@denalternatives) {
                    push(@alternatives, $i.'/'.$j);
                  };
                };
                $numword = $unitWords{$numunitsout};
                $denword = $unitWord{$denunitsout};
                $factornum = $ORCCAconversions{$numunitsin}->{$numunitsout};
                $factorden = $ORCCAconversions{$denunitsin}->{$denunitsout};
                $factor = $factornum/$factorden;
                $b = $a*$factor;
              } until (abs(log10($b)) &lt; 6);
              $given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factornum > 1) ? $factornum : 1;
              $factorden1 = ($factornum > 1) ? 1 : 1/$factornum;
              $factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit => $ORCCAunits});
              $factorden2 = ($factorden > 1) ? $factorden : 1;
              $factornum2 = ($factorden > 1) ? 1 : 1/$factorden;
              $factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>ORCCA.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              do {
                $digits = list_random(2,3);
                $decimals = random(0,$digits-1,1);
                $a = ($digits == 2) ? (random(1,9,1)*10 + random(1,9,1)) / 10**$decimals  :  (random(10,99,1)*10 + random(1,9,1)) / 10**$decimals;
                $numunitsin = list_random('b','B','kb','kB','Mb','MB','GB','TB');
                $numunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$numunitsin}}));
                $denunitsin = list_random('wk','d','h','min','s','ms','ns');
                $denunitsout = list_random(lex_sort(keys %{$ORCCAconversions{$denunitsin}}));
                my @numalternatives = ($numunitsout, @{$unitAlternatives{$numunitsout}});
                my @denalternatives = ($denunitsout, @{$unitAlternatives{$denunitsout}});
                my @alternatives;
                for my $i (@numalternatives) {
                  for my $j (@denalternatives) {
                    push(@alternatives, $i.'/'.$j);
                  };
                };
                $numword = $unitWords{$numunitsout};
                $denword = $unitWord{$denunitsout};
                $factornum = $ORCCAconversions{$numunitsin}->{$numunitsout};
                $factorden = $ORCCAconversions{$denunitsin}->{$denunitsout};
                $factor = $factornum/$factorden;
                $b = $a*$factor;
              } until (abs(log10($b)) &lt; 6);
              $given = NumberWithUnits("$a $numunitsin/$denunitsin", {newUnit => $ORCCAunits});
              $get = NumberWithUnits("$b $numunitsout/$denunitsout", {newUnit => $ORCCAunits});
              $evaluator = $get->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } (@alternatives);
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
              $factornum1 = ($factornum > 1) ? $factornum : 1;
              $factorden1 = ($factornum > 1) ? 1 : 1/$factornum;
              $factornum1U = NumberWithUnits("$factornum1 $numunitsout", {newUnit => $ORCCAunits});
              $factorden1U = NumberWithUnits("$factorden1 $numunitsin", {newUnit => $ORCCAunits});
              $factorden2 = ($factorden > 1) ? $factorden : 1;
              $factornum2 = ($factorden > 1) ? 1 : 1/$factorden;
              $factornum2U = NumberWithUnits("$factornum2 $denunitsin", {newUnit => $ORCCAunits});
              $factorden2U = NumberWithUnits("$factorden2 $denunitsout", {newUnit => $ORCCAunits});
           </pg-code>
          </setup>
          <statement>
            <p>
              Convert <m><var name="$given"/></m> to <var name="$numword"/> per <var name="$denword"/>.
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
          <solution>
            <p>
              <md>
                <mrow><var name="$given"/>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\,\mathrm{<var name="$numunitsin"/>}}{1\,\mathrm{<var name="$denunitsin"/>}}\cdot\frac{<var name="$factornum1U"/>}{<var name="$factorden1U"/>}\cdot\frac{<var name="$factornum2U"/>}{<var name="$factorden2U"/>}</mrow>
                <mrow>\amp=\frac{<var name="$a"/>\cdot <var name="$factornum1U"/> \cdot <var name="$factornum2"/>}{1\cdot <var name="$factorden1"/> \cdot <var name="$factorden2U"/>}</mrow>
                <mrow>\amp=<var name="$get"/></mrow>
              </md>
            </p>
          </solution>
        </webwork>
      </exercise>
    </exercisegroup>

    <exercisegroup cols="3">
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>PCCmacros.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $sqft = random(90,200,1);
              $sqftU = NumberWithUnits("$sqft ft^2");
              $sex = list_random('female','male');
              $name = RandomName(sex=>$sex);
              $Pronoun = ($sex eq 'male') ? 'He' : 'She';
              $pronoun = lc($Pronoun);
              $sqyd = $sqft/9;
              $conversion = {factor => 0.9144, m => 1};
              $sqydU = NumberWithUnits("$sqyd yd^2",
                {newUnit=>[
                  {name=>'yd', conversion => $conversion},
                  {name=>'yard', conversion => $conversion},
                  {name=>'yards', conversion => $conversion},
                ]}
              );
              $evaluator = $sqydU->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } ('yd^2','yard^2','yards^2');
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
            </pg-code>
          </setup>
          <statement>
            <p>
              <var name="$name"/>'s bedroom has <m><var name="$sqftU"/></m> of floor. <var name="$Pronoun"/> would like to carpet the floor, but carpeting is sold by the square yard.
              How many square yards of carpeting will <var name="$pronoun"/> need to get?
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>PCCmacros.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $liters = random(26,50,1);
              $litersU = NumberWithUnits("$liters L");
              $sex = list_random('female','male');
              $name = RandomName(sex=>$sex);
              $Pronoun = ($sex eq 'male') ? 'He' : 'She';
              $pronoun = lc($Pronoun);
              $gallons = $liters/3.785;
              $conversion = {factor => 0.003785, m => 3};
              $gallonsU = NumberWithUnits("$gallons gal",
                {newUnit=>[
                  {name=>'gal', conversion => $conversion},
                  {name=>'gallon', conversion => $conversion},
                  {name=>'gallons', conversion => $conversion},
                ]}
              );
              $evaluator = $gallonsU->cmp->withPostFilter(sub {
                my $ans = shift;
                if ($ans->{score}) {
                  my $correct = $ans->{correct_value};
                  my $student = $ans->{student_value};
                  my %goodunits = map { $_ => 1 } ('gal','gallon','gallons');
                  if (!exists($goodunits{$student->{units}})) {
                    $ans->{ans_message} = "Your answer is equivalent to the correct answer, but it uses the wrong units";
                    $ans->score(0);
                  }
                }
                return $ans;
              });
            </pg-code>
          </setup>
          <statement>
            <p>
              <var name="$name"/> is traveling in Europe and renting a car. <var name="$Pronoun"/> is used to thinking of gasoline amounts in gallons, but in Europe it is sold in liters. After filling the gas tank, <var name="$pronoun"/> notices it took <m><var name="$litersU"/></m> of gas. How many gallons is that?
            </p>
            <p>
              <var name="$evaluator" width="20"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>PCCmacros.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $mph = random(21,68,1);
              $mphU = NumberWithUnits("$mph mph");
              $min = random(3,23,1);
              $minU = NumberWithUnits("$min min");
              $hours = $min/60;
              $miles = $mph*$hours;
              $milesU = NumberWithUnits("$miles mi");
              $sex = list_random('female','male');
              $name = RandomName(sex=>$sex);
              $Pronoun = ($sex eq 'male') ? 'He' : 'She';
              $pronoun = lc($Pronoun);
            </pg-code>
          </setup>
          <statement>
            <p>
              <var name="$name"/> was driving at a steady speed of <m><var name="$mphU"/></m>
              for <m><var name="$min"/></m> minutes. How far did <var name="$pronoun"/> travel in that time?
            </p>
            <p>
              <var name="$milesU" width="20"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise>
        <webwork>
          <pg-macros>
            <macro-file>PCCmacros.pl</macro-file>
          </pg-macros>
          <setup>
            <pg-code>
              $d = {name=>'d',conversion=>{factor=>24*60*60,s=>1}};
              $wk = {name=>'wk',conversion=>{factor=>7*24*60*60,s=>1}};
              $rate = random(0.1,0.5,0.01);
              $rateU = NumberWithUnits("$rate kg/d", {newUnit => $d});
              $weeks = random(3,23,1);
              $weeksU = NumberWithUnits("$weeks wk", {newUnit => $wk});
              $days = $weeks*7;
              $kilograms = $rate*$days;
              $kilogramsU = NumberWithUnits("$kilograms kg");
            </pg-code>
          </setup>
          <statement>
            <p>
              The algae in a pond is growing at a rate of <m><var name="$rateU"/></m>.
              How much algae is in the poind after <m><var name="$weeks"/></m> weeks?
            </p>
            <p>
              <var name="$kilogramsU" width="20"/>
            </p>
          </statement>
        </webwork>
      </exercise>
    </exercisegroup>

    <exercisegroup cols="2">
      <title>Geometry</title>
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectanglePerimeterArea10.pg" seed="6"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectanglePerimeterArea10.pg" seed="26"/>
      </exercise>

    </exercisegroup>
    <exercisegroup cols="3">
      <exercise>
        <webwork source="Contrib/PCC/BasicMath/FractionApplication/FractionMultiplicationWordProblems60.pg" seed="44"/>
      </exercise>

      <exercise>
        <webwork>
            <setup>

            <pg-code>
              Context("Numeric");

              $baseF = random(4,6,0.1);
              $heightI = random(24,36,1);
              $baseI = $baseF*12;

              $baseFU = NumberWithUnits("$baseF ft");
              $baseIU = NumberWithUnits("$baseI in");
              $heightIU = NumberWithUnits("$heightI in");

              $perimeter = 2*($baseI+$heightI);
              $area = $baseI*$heightI;
              $ansP = NumberWithUnits("$perimeter in");
              $ansA = NumberWithUnits("$area in^2");

              $ansPE = NumberWithUnits("$perimeter/12 ft");
              $ansAE = NumberWithUnits("$area/144 ft^2");
            </pg-code>
            </setup>
            <statement>
              <p>
                Find the perimeter and area of a rectangular table top with a length of <m><var name="$baseFU" /></m> and a width of <m><var name="$heightIU" /></m>.
              </p>

              <p>
                Its perimeter is <var name="$ansP" width="5" /> and its area is <var name="$ansA" width="5" />.
              </p>
              <instruction>
                (Use <c>in</c> for inches and <c>in^2</c> for square inches.)
              </instruction>
            </statement>
            <solution>
              <p>
                Notice that the units of the rectangle's length and width are not the same.
                We must convert them to the same unit.
                For this solution,
                we will convert feet to inches to avoid inaccurate answers.
              </p>

              <p>
                The rectangle's length <m><var name="$baseFU" /></m> can be converted to:
                <me>
                  <var name="$baseFU" />\cdot\frac{12\text{ in}}{1\text{ ft}}=<var name="$baseIU" />
                </me>
              </p>

              <p>
                Now we can calculate the rectangle's perimeter by its perimeter formula:
                <md>
                  <mrow>\text{rectangle perimeter}\amp=2(<var name="$baseIU" />+<var name="$heightIU" />)</mrow>
                  <mrow>\amp= <var name="$ansP" /></mrow>
                </md>
                An equivalent answer is <m><var name="$ansPE" /></m>.
              </p>

              <p>
                We will calculate the rectangle's area by its area formula:
                <md>
                  <mrow>\text{rectangle area}\amp= (<var name="$baseIU" />) \cdot (<var name="$heightIU" />)</mrow>
                  <mrow>\amp = <var name="$ansA" /></mrow>
                </md>
                The rectangular table top's area is <m><var name="$ansA" /></m>.
                An equivalent answer is <m><var name="$ansAE" /></m>.
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/TrianglePerimeterArea10.pg" seed="49"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/TrianglePerimeterArea20.pg" seed="56"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicMath/FractionApplication/MixedNumberMultiplicationWordProblems40.pg"  />
      </exercise>

      <exercise>
        <webwork>
            <setup>

            <pg-code>
              Context("Numeric");

              $baseM = random(2,4,0.1);
              $heightCM = random(50,150,10);
              $heightM = $heightCM/100;

              $baseMU = NumberWithUnits("$baseM m");
              $heightMU = NumberWithUnits("$heightM m");
              $heightCMU = NumberWithUnits("$heightCM cm");

              $area = $baseM*$heightM/2;
              $ansA = NumberWithUnits("$area m^2");
              $ansAE = NumberWithUnits("$area*10000 cm^2");
            </pg-code>
            </setup>
            <statement>
              <p>
                Find the area of a triangular flag with a base of <m><var name="$baseMU" /></m> and a height of <m><var name="$heightCMU" /></m>.
              </p>

              <p>
                Its area is <var name="$ansA" width="5" />.
              </p>
              <instruction>
                (Use <c>m</c> for meters and <c>m^2</c> for square meters.)
              </instruction>
            </statement>
            <solution>
              <p>
                Notice that the units of the triangle's base and height are not the same.
                We must convert them to the same unit.
                For this solution,
                we will convert centimeters to meters to avoid big numbers.
              </p>

              <p>
                The triangle's height <m><var name="$heightCMU" /></m> can be converted to:
                <me>
                  <var name="$heightCMU" />\cdot\frac{1\text{ m}}{100\text{ cm}}=<var name="$heightMU" />
                </me>
              </p>

              <p>
                We will calculate the triangular flag's area by its area formula:
                <md>
                  <mrow>\text{triangle area}\amp= \frac{1}{2}bh</mrow>
                  <mrow>\amp=\frac{1}{2}(<var name="$baseMU" />) \cdot (<var name="$heightMU" />)</mrow>
                  <mrow>\amp = <var name="$ansA" /></mrow>
                </md>
                The flag's area is <m><var name="$ansA" /></m>.
                An equivalent answer is <m><var name="$ansAE" /></m>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectanglePerimeterArea40.pg" seed="69"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectanglePerimeterArea50.pg" seed="89"/>
      </exercise>
    </exercisegroup>

    <exercisegroup cols="2">

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/EvaluateFormula10.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CircleCircumferenceArea10.pg" />
      </exercise>
    </exercisegroup>

    <exercisegroup cols="3">
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/PolygonPerimeterArea20.pg" seed="87"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectangularPrismVolume10.pg" seed="92"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectangularPrismVolume20.pg"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CylinderVolume10.pg" seed="138"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CylinderVolume20.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CylinderVolume20.pg" />
      </exercise>

    </exercisegroup>

    <exercise>
      <webwork>
        <setup>
          <pg-code>
            Context("Numeric")->variables->are(
              P=>'Real',
              l=>'Real',
              w=>'Real',
              A=>'Real',
              b=>'Real',
              h=>'Real',
              c=>'Real',
              C=>'Real',
              d=>'Real',
              r=>'Real',
              V=>'Real',
              B=>'Real');
            parser::Assignment->Allow;
            $rectangleperimeter = Formula("P=2(l+w)");
            $rectanglearea = Formula("A=lw");
            $trianglearea = Formula("A=1/2bh");
            $circleperimeter = OneOf(Formula("c=pi d"), Formula("c=2 pi r"), Formula("C=pi d"), Formula("C=2 pi r"));
            $circlearea = Formula("A=pi r^2");
            $prismvolume = OneOf(Formula("V=wdh"), Formula("V=lwh"), Formula("V=lhd"));
            $cylindervolume = Formula("V=pi r^2h");
            $bothvolume = Formula("V=Bh");
          </pg-code>
        </setup>
        <statement>
          <p>
            Fill out the table with various formulas as they were given in this section.
          </p>
          <sidebyside>
            <tabular>
              <row>
                <cell>Rectangle Perimeter</cell>
                <cell><var name="$rectangleperimeter" width="15" /></cell>
              </row>
              <row>
                <cell>Rectangle Area</cell>
                <cell><var name="$rectanglearea" width="15" /></cell>
              </row>
              <row>
                <cell>Triangle Area</cell>
                <cell><var name="$trianglearea" width="15" /></cell>
              </row>
              <row>
                <cell>Circle Circumference</cell>
                <cell><var name="$circleperimeter" width="15" /></cell>
              </row>
              <row>
                <cell>Circle Area</cell>
                <cell><var name="$circlearea" width="15" /></cell>
              </row>
              <row>
                <cell>Rectangular Prism Volume</cell>
                <cell><var name="$prismvolume" width="15" /></cell>
              </row>
              <row>
                <cell>Cylinder Volume</cell>
                <cell><var name="$cylindervolume" width="15" /></cell>
              </row>
              <row>
                <cell>Volume of either Rectangular Prism or Cylinder</cell>
                <cell><var name="$bothvolume" width="15" /></cell>
              </row>
            </tabular>
          </sidebyside>
        </statement>
      </webwork>
    </exercise>

    <exercisegroup cols="2">
      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CircleCircumferenceArea30.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CircleCircumferenceArea40.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CircleCircumferenceArea40.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/CylinderVolume30.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/RectangularPrismVolume30.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/TrianglePerimeterArea40.pg" />
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/SimilarTriangles50.pg" seed="1596"/>
      </exercise>

      <exercise>
        <webwork source="Contrib/PCC/BasicAlgebra/Geometry/SimilarTriangles60.pg" seed="1601"/>
      </exercise>
    </exercisegroup>

  </exercises>
</section>

