<?xml version="1.0" encoding="UTF-8" ?>
<!-- *********************************************************************-->
<!-- Copyright 2016-2018                                                  -->
<!-- Portland Community College                                           -->
<!--                                                                      -->
<!-- This file is part of Open Resources for Community College Algebra    -->
<!-- (ORCCA).                                                             -->
<!--                                                                      -->
<!-- Open Resources for Community College Algebra is licensed under a     -->
<!-- Creative Commons Attribution 4.0 International License.              -->
<!--                                                                      -->
<!-- Under this license, any user of this textbook or the textbook        -->
<!-- contents must provide proper attribution as follows.                 -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- include in every digital format page view (including but not         -->
<!-- limited to EPUB, PDF, and HTML) and on every physical printed page   -->
<!-- the following attribution:                                           -->
<!--                                                                      -->
<!-- Original source material, products with readable and accessible      -->
<!-- math content, and other information freely available at              -->
<!-- pcc.edu/orcca.                                                       -->
<!--                                                                      -->
<!-- If you redistribute all or part of this textbook, then you must      -->
<!-- reproduce any math content (such as math expressions and equations)  -->
<!-- in a readable manner, and offer math content in at least one web     -->
<!-- accessible manner.                                                   -->
<!--                                                                      -->
<!-- The Portland Community College name, Portland Community College      -->
<!-- logo, ORCCA name, Open Resources for Community College Algebra name, -->
<!-- ORCCA logo, and front and back cover designs are not subject to the  -->
<!-- Creative Commons license and may not be reproduced without the       -->
<!-- prior and express written consent of Portland Community College.     -->
<!--                                                                      -->
<!-- For questions regarding this license, please contact                 -->
<!-- orcca-group@pcc.edu.                                                 -->
<!-- *********************************************************************-->
<section xml:id="review-variables-expressions-and-equations" permid="CAy">
  <title>Variables, Expressions, and Equations Chapter Review</title>
  <subsection permid="iHH">
    <title>Variables and Evaluating Expressions</title>
    <p permid="FQQ">
      In <xref ref="section-variables-and-evaluating-expressions">Section</xref>
      we covered the definitions of variables and expressions,
      and how to evaluate an expression with a particular number.
    </p>

    <paragraphs permid="pgN">
      <title>Evaluating Expressions</title>
      <p permid="lXZ">
        When we evaluate an expression's value,
        we substitute each variable with its given value.
      </p>
    </paragraphs>

    <example permid="GeY">
      <p permid="xCx">
        Evaluate the value of <m>\frac{5}{9}(F - 32)</m> if <m>F=212</m>.
        <md permid="giN">
          <mrow>\frac{5}{9}(F - 32)\amp=\frac{5}{9}(212 - 32)</mrow>
          <mrow>\amp=\frac{5}{9}(180)</mrow>
          <mrow>\amp=100</mrow>
        </md>
      </p>
    </example>

    <paragraphs permid="VnW">
      <title>Substituting a Negative Number</title>
      <p permid="Sfi">
        When we substitute a variable with a negative number,
        it's important to use parentheses around the number.
      </p>
    </paragraphs>

    <example permid="mmh">
      <p permid="dJG">
        Evaluate the following expressions if <m>x=-3</m>.

        <ol label="a." cols="4" permid="cbx">
          <li permid="RCs">
            <p permid="YLs">
              <m>\begin{aligned}[t]
              x^2\amp=(-3)^2\\
              \amp=9
              \end{aligned}</m>
            </p>
          </li>

          <li permid="xJB">
            <p permid="ESB">
              <m>\begin{aligned}[t]
              x^3\amp=(-3)^3\\
              \amp=(-3)(-3)(-3)\\
              \amp=-27
              \end{aligned}</m>
            </p>
          </li>

          <li permid="dQK">
            <p permid="kZK">
              <m>\begin{aligned}[t]
              -x^2\amp=-(-3)^2\\
              \amp=-9
              \end{aligned}</m>
            </p>
          </li>

          <li permid="JXT">
            <p permid="RgT">
              <m>\begin{aligned}[t]
              -x^3\amp=-(-3)^3\\
              \amp=-(-27)\\
              \amp=27
              \end{aligned}</m>
            </p>
          </li>
        </ol>
      </p>
    </example>
  </subsection>

  <!-- Moved out of this chapter for edition 2 -->
  <!-- <subsection permid="OOQ">
    <title>Geometry Formulas</title>
    <p permid="ymr">
      In <xref ref="section-geometry-formulas">Section</xref>
      we established the following formulas.
      <dl permid="ZgR">
        <li permid="bFY">
          <title>Perimeter of a Rectangle</title>
          <p permid="xoc">
            <m>P=2(\ell+w)</m>
          </p>
        </li>

        <li permid="HNh">
          <title>Area of a Rectangle</title>
          <p permid="dvl">
            <m>A=\ell w</m>
          </p>
        </li>

        <li permid="nUq">
          <title>Area of a Triangle</title>
          <p permid="JCu">
            <m>A=\frac{1}{2}bh</m>
          </p>
        </li>

        <li permid="Ubz">
          <title>Circumference of a Circle</title>
          <p permid="pJD">
            <m>c=2\pi r</m>
          </p>
        </li>

        <li permid="AiI">
          <title>Area of a Circle</title>
          <p permid="VQM">
            <m>A=\pi r^2</m>
          </p>
        </li>

        <li permid="gpR">
          <title>Volume of a Rectangular Prism</title>
          <p permid="BXV">
            <m>V=wdh</m>
          </p>
        </li>

        <li permid="Mxa">
          <title>Volume of a Cylinder</title>
          <p permid="ife">
            <m>V=\pi r^2h</m>
          </p>
        </li>

        <li permid="sEj">
          <title>Volume of a Rectangular Prism or Cylinder</title>
          <p permid="Omn">
            <m>V=Bh</m>
          </p>
        </li>
      </dl>
    </p>
  </subsection> -->

  <subsection permid="uVZ">
    <title>Combining Like Terms</title>
    <p permid="etA">
      In <xref ref="section-combining-like-terms">Section</xref>
      we covered the definitions of a term and how to combine like terms.
    </p>

    <example permid="Stq">
      <statement>
        <p permid="JQP">
          List the terms in the expression <m>5x-3y+\frac{2w}{3}</m>.
        </p>
      </statement>
      <solution permid="VCr">
        <p permid="jyS">
          The expression has three terms that are being added, <m>5x</m>,
          <m>-3y</m> and <m>\frac{2w}{3}</m>.
        </p>
      </solution>
    </example>

    <example permid="yAz">
      <statement>
        <p permid="pXY">
          Simplify the expression <m>5x-3x^2+2x+5x^2</m>,
          if possible, by combining like terms.
        </p>
      </statement>
      <solution permid="BJA">
        <p permid="PGb">
          This expression has four terms:
          <m>5x</m>, <m>-3x^2</m>, <m>2x</m>, and <m>5x^2</m>.
          Both <m>5x</m> and <m>2x</m> are like terms;
          also <m>-3x^2</m> and <m>5x^2</m> are like terms.
          When we combine like terms, we get:
          <me permid="MpW">
            5x-3x^2+2x+5x^2=7x+2x^2
          </me>
          Note that we cannot combine <m>7x</m> and <m>2x^2</m> because <m>x</m> and <m>x^2</m> represent different quantities.
        </p>
      </solution>
    </example>
  </subsection>

<subsection permid="uMv">
    <title>Comparison Symbols and Notation for Intervals</title>
    <p permid="Tww">
      The following are symbols used to compare numbers.
    </p>

    <table permid="IXr">
      <caption>Comparison Symbols</caption>
      <tabular valign="top" permid="peA">
        <row bottom="medium">
          <cell>Symbol</cell>
          <cell>Means</cell>
          <cell>True</cell>
          <cell>True</cell>
          <cell>False</cell>
        </row>
        <row>
          <cell><m>=</m></cell>
          <cell>equals</cell>
          <cell><m>13=13\qquad</m></cell>
          <cell><m>\frac{5}{4}=1.25</m></cell>
          <cell><m>5\stackrel{\text{no}}{=}6</m></cell>
        </row>
        <row>
          <cell><m>\gt</m></cell>
          <cell>is greater than</cell>
          <cell><m>13\gt11</m></cell>
          <cell><m>\pi\gt3</m></cell>
          <cell><m>9\stackrel{\text{no}}{\gt}9</m></cell>
        </row>
        <row>
          <cell><m>\geq</m></cell>
          <cell>is greater than or equal to</cell>
          <cell><m>13\geq11</m></cell>
          <cell><m>3\geq3</m></cell>
          <cell><m>11.2\stackrel{\text{no}}{\geq}10.2</m></cell>
        </row>
        <row>
          <cell><m>\lt</m></cell>
          <cell>is less than</cell>
          <cell><m>-3\lt8</m></cell>
          <cell><m>\frac{1}{2}\lt\frac{2}{3}</m></cell>
          <cell><m>2\stackrel{\text{no}}{\lt}-2</m></cell>
        </row>
        <row>
          <cell><m>\leq</m></cell>
          <cell>is less than or equal to</cell>
          <cell><m>-3\leq8</m></cell>
          <cell><m>3\leq3</m></cell>
          <cell><m>\frac{4}{5}\stackrel{\text{no}}{\leq}\frac{3}{5}</m></cell>
        </row>
        <row>
          <cell><m>\neq</m></cell>
          <cell>is not equal to</cell>
          <cell><m>10\neq20</m></cell>
          <cell><m>\frac{1}{2}\neq1.2</m></cell>
          <cell><m>\frac{3}{8}\stackrel{\text{no}}{\neq}0.375</m></cell>
        </row>
      </tabular>

    </table>

    <p permid="zDF">
      The following are some examples of set-builder notation and interval notation.
    </p>

    <sbsgroup permid="bDy">
      <sidebyside widths="40% 27% 27%" margins="0%">
        <p>Graph</p>
        <p>Set-builder Notation</p>
        <p>Interval Notation</p>
        <!-- titles of some form would be nicer, but stack does not permit titles -->
        <!-- <stack>
          <title>Graph</title>
          <title>Set-builder Notation</title>
          <title>Interval Notation</title>
        </stack> -->
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="Eny">
          <description>a number line graph with a bracket at 1 opening to the right; a thick arrow points to the right</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                \addplot+[closedinfiniteinterval] coordinates {(1,0) (3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\ge1\right\}</m></p>
        <p><m>[1,\infty)</m></p>
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="kuH">
          <description>a number line with a parenthesis opening to the right; a thick arrow points to the right</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                  \addplot+[openinfiniteinterval] coordinates {(1,0) (3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\gt1\right\}</m></p>
        <p><m>(1,\infty)</m></p>
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="QBQ">
          <description>a number line with a bracket at 1 opening to the left; a thick arrow points to the left</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                  \addplot+[closedinfiniteinterval] coordinates {(1,0) (-3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\le1\right\}</m></p>
        <p><m>(-\infty,1]</m></p>
      </sidebyside>
      <sidebyside widths="40% 27% 27%" margins="0%">
        <image permid="wIZ">
          <description>a number line with a parenthesis at 1 opening to the left; a thick arrow points to the left</description>
          <latex-image>
            <![CDATA[\begin{tikzpicture}
              \begin{axis}[numberline,
                          xmin=-3,xmax=3,
                          xtick={-2,-1,...,2},
                          minor xtick={-2,-1,...,2},
                          ]
                  \addplot+[openinfiniteinterval] coordinates {(1,0) (-3,0)};
              \end{axis}
            \end{tikzpicture}]]>
          </latex-image>
        </image>
        <p><m>\left\{x\mid x\lt1\right\}</m></p>
        <p><m>(-\infty,1)</m></p>
      </sidebyside>
    </sbsgroup>
  </subsection>

  <subsection permid="bdi">
    <title>Equations and Inequalities as True/False Statements</title>
    <p permid="KAJ">
      In <xref ref="section-equations-and-inequalities-as-true-false-statements">Section</xref>
      we covered the definitions of an equation and an inequality,
      as well as how to verify if a particular number is a solution to them.
    </p>

    <paragraphs permid="Bvf">
      <title>Checking Possible Solutions</title>
      <p permid="qHS">
        Given an equation or an inequality
        (with one variable),
        checking if some particular number is a solution is just a matter of replacing the value of the variable with the specified number and determining if the resulting equation/inequality is true or false.
        This may involve some amount of arithmetic simplification.
      </p>
    </paragraphs>

    <example permid="eHI">
      <statement>
        <p permid="Wfh">
          Is <m>-5</m> a solution to <m>2(x+3)-2=4-x</m>?
        </p>
      </statement>
      <solution permid="hQJ">
        <p permid="vNk">
          To find out,
          substitute in <m>-5</m> for <m>x</m> and see what happens.
          <md permid="sxf">
            <mrow>2(x+3)-2\amp=4-x</mrow>
            <mrow>2(\substitute{(-5)}+3)-2\amp\stackrel{?}{=}4-\substitute{(-5)}</mrow>
            <mrow>2(\highlight{-2})-2\amp\stackrel{?}{=}\highlight{9}</mrow>
            <mrow>\highlight{-4}-2\amp\stackrel{?}{=}9</mrow>
            <mrow>\highlight{-6}\amp\stackrel{\text{no}}{=}9</mrow>
          </md>
          So no, <m>-5</m> is not a solution to <m>2(x+3)-2=4-x</m>.
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="Hkr">
    <title>Solving One-Step Equations</title>
    <p permid="WPb">
      In <xref ref="section-solving-one-step-equations">Section</xref>
      we covered to to add, subtract, multiply,
      or divide on both sides of an equation to isolate the variable,
      summarized in <xref ref="fact-properties-of-equivalent-equations">Fact</xref>.
      We also learned how to state our answer,
      either as a solution or a solution set.
      Last, we discussed how to solve equations with fractions.
    </p>

    <paragraphs permid="hCo">
      <title>Solving One-Step Equations</title>
      <p permid="CWk">
        When we solve linear equations,
        we use <xref ref="fact-properties-of-equivalent-equations" text="title" /> and follow an algorithm to <xref ref="algorithm-steps-to-solve-one-step-linear-equation" text="title">solve a linear equation</xref>.
      </p>
    </paragraphs>

    <example permid="KOR">
      <statement>
        <p permid="Cmq">
          Solve for <m>g</m> in <m>\frac{1}{2}=\frac{2}{3}+g</m>.
        </p>
      </statement>
      <solution permid="NXS">
        <sidebyside widths="47% 47%" margins="0%">
          <p permid="bUt">
            We will subtract <m>\frac{2}{3}</m> on both sides of the equation:
            <md permid="YEo">
              <mrow>\frac{1}{2}\amp=\frac{2}{3}+g</mrow>
              <mrow>\frac{1}{2}\subtractright{\frac{2}{3}}\amp=\frac{2}{3}+g\subtractright{\frac{2}{3}}</mrow>
              <mrow>\frac{3}{6}-\frac{4}{6}\amp=g</mrow>
              <mrow>-\frac{1}{6}\amp=g</mrow>
            </md>
          </p>

          <p permid="IbC">
            We will check the solution by substituting <m>g</m> in the original equation with <m>-\frac{1}{6}</m>:
            <md permid="ELx">
              <mrow>\frac{1}{2}\amp=\frac{2}{3}+g</mrow>
              <mrow>\frac{1}{2}\amp\stackrel{?}{=}\frac{2}{3}+\left(\substitute{-\frac{1}{6}}\right)</mrow>
              <mrow>\frac{1}{2}\amp\stackrel{?}{=}\frac{4}{6}+\left(-\frac{1}{6}\right)</mrow>
              <mrow>\frac{1}{2}\amp\stackrel{\checkmark}{=}\frac{3}{6}</mrow>
            </md>
          </p>
        </sidebyside>

        <p>
          The solution <m>-\frac{1}{6}</m> is checked and the solution set is <m>\left\{-\frac{1}{6}\right\}</m>.
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="nrA">
    <title>Solving One-Step Inequalities</title>
    <p permid="jdt">
      In <xref ref="section-solving-one-step-inequalities">Section</xref>
      we covered how solving inequalities is very much like how we solve equations,
      except that if we <xref ref="fact-changing-direction-of-inequality-sign" text="title">multiply or divide by a negative</xref>
      we switch the inequality sign.
    </p>

    <paragraphs permid="NJx">
      <title>Solving One-Step Inequalities</title>
      <p permid="PkC">
        When we solve linear inequalities,
        we also use <xref ref="fact-properties-of-equivalent-equations" text="title" /> with one small complication: When we multiply or divide by the same <em>negative</em>
        number on both sides of an inequality, the direction reverses!
      </p>
    </paragraphs>

    <example permid="qWa">
      <statement>
        <p permid="itz">
          Solve the inequality <m>-2x\geq12</m>.
          State the solution set with both interval notation and set-builder notation.
        </p>
      </statement>
      <solution permid="ufb">
        <p permid="oiL">
          To solve this inequality, we will divide each side by <m>-2</m>:
          <md permid="kSG">
            <mrow>-2x\amp\geq12</mrow>
            <mrow>\divideunder{-2x}{-2}\amp\highlight{{}\leq{}}\divideunder{12}{-2}\amp\amp\text{Note the change in direction.}</mrow>
            <mrow>x\amp\leq-6</mrow>
          </md>
          <ul permid="DyN">
            <li permid="Foa">
              <p permid="utw">
                The inequality's solution set in interval notation is <m>(-\infty,-6]</m>.
              </p>
            </li>

            <li permid="lvj">
              <p permid="aAF">
                The inequality's solution set in set-builder notation is <m>\{x\mid x\leq-6\}</m>.
              </p>
            </li>
          </ul>
        </p>
      </solution>
<!--                <p>Since there are infinitely many solutions, it's impossible to literally check them all. We found that all values of <m>x</m> for which <m>x\leq-6</m> are solutions, One approach is to check that <m>-6</m> satisfies the inequality, and also that one number less than <m>-6</m> (any number, your choice) is a solution.<md>
                    <mrow>-2x\amp\geq12\amp -2x\amp\ge12</mrow>
                    <mrow>-2(\substitute{-6})\amp\stackrel{?}{\geq}12\amp -2(\substitute{-7})\amp\stackrel{?}{\ge}12</mrow>
                    <mrow>12\amp\stackrel{\checkmark}{\geq}12\amp 14\amp\stackrel{\checkmark}{\ge}12</mrow>
                </md>
                </p>
-->
    </example>
  </subsection>

  <!-- Moved out of this chapter for edition 2 -->
  <!-- <subsection permid="TyJ">
    <title>Percentages</title>
    <p permid="vrL">
      In <xref ref="section-percentages">Section</xref>
      we covered how to translate sentences with percentages into equations that we can solve.
    </p>

    <paragraphs permid="tQG">
      <title>Solving One-Step Equations Involving Percentages</title>
      <p permid="byU">
        An important skill for solving percent-related problems is to boil down a complicated word problem into a simple form like
        <q><m>2</m> is <m>50\%</m> of <m>4</m>.</q>
      </p>
    </paragraphs>

    <example permid="Xdj">
      <p permid="OAI">
        What percent of <m>2346.19</m> is <m>1995.98</m>?
      </p>

      <p permid="uHR">
        Using <m>P</m> to represent the unknown quantity,
        we write and solve the equation:
        <md permid="QZP">
          <mrow>\overbrace{\strut P}^{\text{what percent}}\overbrace{\strut \cdot}^{\text{of}} \overbrace{\strut 2346.19}^{\text{\$2346.19}}\amp\overbrace{\strut =}^{\text{is}}\overbrace{\strut 1995.98}^{\text{\$1995.98}}</mrow>
          <mrow>\divideunder{P\cdot 2346.19}{2346.19}\amp=\divideunder{1995.98}{2346.19}</mrow>
          <mrow>P\amp=0.85073\ldots</mrow>
          <mrow>P\amp\approx85.07\%</mrow>
        </md>
      </p>

      <p permid="aPa">
        In summary, <m>1995.98</m> is approximately <m>85.07\%</m> of <m>2346.19</m>.
      </p>
    </example>
  </subsection> -->


  <subsection permid="LUk">
    <title>Algebraic Properties and Simplifying Expressions</title>
    <p permid="AbE">
      In <xref ref="section-algebraic-properties-and-simplifying-expressions">Section</xref>
      we covered the definitions of the identities and inverses,
      and the various <xref ref="list-algebraic-properties" text="title">algebraic properties</xref>.
      We then learned about the order of operations.
    </p>
<!--
        <paragraphs>
            <title>Algebraic Properties</title>
            <p>Let <m>a</m>, <m>b</m>, and <m>c</m> represent real numbers, variables, or algebraic expressions. Then the following properties hold:<dl>
                <li>
                    <title>Commutative Property of Multiplication</title><idx><h>properties</h><h>commutative property of multiplication</h></idx><idx><h>multiplication</h><h>commutative property of</h></idx>
                    <p><men xml:id="equation-commutative-property-multiplication">a\cdot b=b\cdot a</men></p>
                </li>
                <li>
                    <title>Associative Property of Multiplication</title><idx><h>properties</h><h>associative property of multiplication</h></idx><idx><h>multiplication</h><h>associative property of</h></idx>
                    <p><me>a\cdot(b\cdot c)=(a\cdot b)\cdot c</me></p>
                </li>
                <li>
                    <title>Commutative Property of Addition</title><idx><h>properties</h><h>commutative property of addition</h></idx><idx><h>addition</h><h>commutative property of</h></idx>
                    <p><me>a+b=b+a</me></p>
                </li>
                <li>
                    <title>Associative Property of Addition</title><idx><h>properties</h><h>associative property of addition</h></idx><idx><h>addition</h><h>associative property of</h></idx>
                    <p><me>a+(b+c)=(a+b)+c</me></p>
                </li>
                <li>
                    <title>Distributive Property</title><idx><h>properties</h><h>distributive property</h></idx>
                    <p><men xml:id="equation-distributive-property">a(b+c)=ab+ac</men></p>
                </li>
            </dl></p>
        </paragraphs> -->
    <example permid="PyK">
      <statement>
        <p permid="TkB">
          Use the associative, commutative,
          and distributive properties to simplify the expression <m>5x+9(-2x+3)</m> as much as possible.
        </p>
      </statement>
      <solution permid="mAC">
        <p permid="gEm">
          We will remove parentheses by the distributive property,
          and then combine like terms:
          <md permid="doh">
            <mrow>5x+9(-2x+3)\amp=5x+9(-2x+3)</mrow>
            <mrow>\amp=5x+9(-2x)+9(3)</mrow>
            <mrow>\amp=5x-18x+27</mrow>
            <mrow>\amp=-13x+27</mrow>
          </md>
        </p>
      </solution>
    </example>
  </subsection>


  <subsection permid="zFS">
    <title>Modeling with Equations and Inequalities</title>
    <p permid="HGd">
      In <xref ref="section-modeling-with-equations-and-inequalities">Section</xref>
      we covered how to translate phrases into mathematics,
      and how to set up equations and inequalities for application models.
    </p>

    <paragraphs permid="ZXP">
      <title>Modeling with Equations and Inequalities</title>
      <p permid="nNm">
        To set up an equation modeling a real world scenario,
        the first thing we need to do is to identify what variable we will use.
        The variable we use will be determined by whatever is unknown in our problem statement.
        Once we've identified and defined our variable,
        we'll use the numerical information provided in the equation to set up our equation.
      </p>
    </paragraphs>

    <example permid="Dks">
      <statement>
        <p permid="GWj">
          A bathtub contains
          <quantity>
            <mag>2.5</mag><unit base="foot" exp="3"/>
          </quantity>
          of water.
          More water is being poured in at a rate of
          <quantity>
            <mag>1.75</mag><unit base="foot" exp="3"/>
          </quantity>
          per minute.
          When will the amount of water in the bathtub reach
          <quantity>
            <mag>6.25</mag><unit base="foot" exp="3"/>
          </quantity>?
        </p>
      </statement>
      <solution permid="amk">
        <p permid="UpU">
          Since the question being asked in this problem starts with <q>when,</q>
          we immediately know that the unknown is time.
          As the volume of water in the tub is measured in
          <quantity>
            <unit base="foot" exp="3"/>
          </quantity>
          per minute, we know that time needs to be measured in minutes.
          We'll defined <m>t</m> to be the number of minutes that water is poured into the tub.
          Since each minute there are
          <quantity>
            <mag>1.75</mag><unit base="foot" exp="3"/>
          </quantity>
          of water added,
          we will add the expression <m>1.75t</m> to <m>2.5</m> to obtain the total amount of water.
          Thus the equation we set up is:
          <me permid="xgY">
            2.5+1.75t=6.25
          </me>
        </p>
      </solution>
    </example>
  </subsection>

  <exercises permid="sbt">

    <exercisegroup>
      <title>Variables and Evaluating Expressions</title>
      <!-- <exercise>
      <webwork>
          <setup>

            <pg-code>
                Context()->variables->are();
                for my $i (1..26) {
                    Context()->variables->add($ALPHABET[$i-1]=>'Real');
                    Context()->variables->add(lc($ALPHABET[$i-1])=>'Real');
                    };

                $d=OneOf('d','D','x','y');
                Context()->strings->add('feet'=>{});
                Context()->strings->add('foot'=>{alias=>'feet'}, 'ft'=>{alias=>'feet'}, 'ft.'=>{alias=>'feet'});
                Context()->strings->add('meters'=>{});
                Context()->strings->add('meter'=>{alias=>'meters'}, 'm'=>{alias=>'meters'}, 'm.'=>{alias=>'meters'});
                $ftorm = OneOf("feet, meters");

                $w=OneOf('w','W','x','y');
                Context()->strings->add('pounds'=>{});
                Context()->strings->add('pound'=>{alias=>'pounds'}, 'lb'=>{alias=>'pounds'}, 'lb.'=>{alias=>'pounds'}, 'lbs'=>{alias=>'pounds'}, 'lbs.'=>{alias=>'pounds'});
                Context()->strings->add('kilograms'=>{});
                Context()->strings->add('kilogram'=>{alias=>'kilograms'}, 'kg'=>{alias=>'kilograms'}, 'kg.'=>{alias=>'kilograms'}, 'kgs'=>{alias=>'kilograms'}, 'kgs.'=>{alias=>'kilograms'});
                $lborkg = OneOf("pounds, kilograms");
            </pg-code>
          </setup>
          <statement>
            <p>
              Identify a variable you might use to represent each quantity.
              And identify what units would be most appropriate.

              <ol label="a.">
                <li>
                  <p>
                    Let <var name="$d" width="2" /> be the depth of a swimming pool,
                    measured in <var name="$ftorm" width="12" />.
                  </p>
                </li>

                <li>
                  <p>
                    Let <var name="$w" width="2" /> be the weight of a dog,
                    measured in <var name="$lborkg" width="12" />.
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution>
            <p>
              <ol label="a.">
                <li>
                  <p>
                    The unknown quantity is depth, which starts with <q>d</q>.
                    We generally measure depth in feet for a swimming pool.
                    (Meters is another reasonable unit.)
                    So we could define this variable as:
                  </p>

                  <p>
                    <q>Let <m>d</m> be the depth of a swimming pool, measured in feet.</q>
                  </p>
                </li>

                <li>
                  <p>
                    The weight of the dog is the unknown quantity, and <q>weight</q> starts with <q>w</q>.
                    We generally measure the weight of a dog in pounds.
                    (Kilograms is another reasonable unit.)
                    So we could define this variable as:
                  </p>

                  <p>
                    <q>Let <m>w</m> be be the weight of a dog, measured in pounds.</q>
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise>

    <exercise>
      <webwork>
          <setup>

            <pg-code>
                Context()->variables->are();
                for my $i (1..26) {
                    Context()->variables->add($ALPHABET[$i-1]=>'Real');
                    Context()->variables->add(lc($ALPHABET[$i-1])=>'Real');
                    };

                $t=OneOf('t','T','x','y');
                Context()->strings->add('hours'=>{});
                Context()->strings->add('hour'=>{alias=>'hours'}, 'hr'=>{alias=>'hours'}, 'hr.'=>{alias=>'hours'}, 'hrs'=>{alias=>'hours'}, 'hrs.'=>{alias=>'hours'}, 'h'=>{alias=>'hours'}, 'h.'=>{alias=>'hours'});
                $hours = String("hours");

                $a=OneOf('a','A','s','S','x','y');
                Context()->strings->add('ft^2'=>{});
                Context()->strings->add('square feet'=>{alias=>'ft^2'}, 'feet squared'=>{alias=>'ft^2'}, 'feet square'=>{alias=>'ft^2'}, 'sq ft'=>{alias=>'ft^2'}, 'sqft'=>{alias=>'ft^2'}, 'sq. ft.'=>{alias=>'ft^2'}, 'ft.^2'=>{alias=>'ft^2'});
                Context()->strings->add('m^2'=>{});
                Context()->strings->add('square meters'=>{alias=>'m^2'}, 'meters squared'=>{alias=>'m^2'}, 'meters square'=>{alias=>'m^2'}, 'sq m'=>{alias=>'m^2'}, 'sqm'=>{alias=>'m^2'}, 'sq. m.'=>{alias=>'m^2'}, 'm.^2'=>{alias=>'m^2'});
                $sqftorsqm = OneOf("ft^2, m^2");
            </pg-code>
          </setup>
          <statement>
            <p>
              Identify a variable you might use to represent each quantity.
              And identify what units would be most appropriate.

              <ol label="a.">
                <li>
                  <p>
                    Let <var name="$t" width="2" /> be the amount of time a person sleeps each night,
                    measured in <var name="$hours" width="12" />.
                  </p>
                </li>

                <li>
                  <p>
                    Let <var name="$a" width="2" /> be the surface area of a patio,
                    measured in <var name="$sqftorsqm" width="12" />.
                  </p>
                </li>
              </ol>
            </p>
          </statement>
          <solution>
            <p>
              <ol label="a.">
                <li>
                  <p>
                    The unknown quantity is time, and <q>time</q> starts with a <q>t</q>.
                    The amount of time a person sleeps would typically be measured in hours.
                    So we could define this variable as:
                  </p>

                  <p>
                    <q>Let <m>t</m> be the amount of time a person sleeps each night, measured in hours.</q>
                  </p>
                </li>

                <li>
                  <p>
                    The unknown quantity is area, and <q>area</q> starts with an <q>a</q>.
                    Patio area is usually measured in square feet.
                    (Square meters is another reasonable unit.)
                    So we could define this variable as:
                  </p>

                  <p>
                    <q>Let <m>A</m> be the area of a patio, measured in <m>\text{ft}^2</m>.</q>
                  </p>
                </li>
              </ol>
            </p>
          </solution>
      </webwork>
    </exercise> -->

      <!-- <exercise permid="MMn">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate10.pg" />
      </exercise>

      <exercise permid="sTw">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate10.pg" />
      </exercise>

      <exercise permid="ZaF">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate12.pg" />
      </exercise>

      <exercise permid="FhO">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate12.pg" />
      </exercise>

      <exercise permid="loX">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate15.pg" />
      </exercise>

      <exercise permid="Rwg">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate15.pg" />
      </exercise>

      <exercise permid="xDp">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate18.pg" />
      </exercise>

      <exercise permid="dKy">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate18.pg" />
      </exercise> -->

      <exercise permid="JRH">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
      </exercise>

      <exercise permid="pYQ">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate100.pg" />
      </exercise>

      <!-- <exercise permid="WfZ">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate120.pg" />
      </exercise>

      <exercise permid="Cni">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate120.pg" />
      </exercise>

      <exercise permid="iur">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate130.pg" seed="1"/>
      </exercise>

      <exercise permid="OBA">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate130.pg" seed="2"/>
      </exercise>

      <exercise permid="uIJ">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate20.pg" />
      </exercise>

      <exercise permid="aPS">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate20.pg" />
      </exercise> -->

      <exercise permid="GXb">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate80.pg" />
      </exercise>

      <exercise permid="nek">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate80.pg" />
      </exercise>

      <!-- <exercise permid="Tlt">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate50.pg" />
      </exercise>

      <exercise permid="zsC">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate50.pg" />
      </exercise>

      <exercise permid="fzL">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate60.pg" />
      </exercise>

      <exercise permid="LGU">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate60.pg" />
      </exercise>

      <exercise permid="rOd">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate90.pg" />
      </exercise>

      <exercise permid="XVm">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate90.pg" />
      </exercise> -->

      <exercise permid="Ecv">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <exercise permid="kjE">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-04-Expressions.pg" />
      </exercise>

      <!-- <exercise permid="QqN">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-06-Expressions.pg" />
      </exercise>

      <exercise permid="wxW">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-06-Expressions.pg" />
      </exercise>

      <exercise permid="cFf">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="IMo">
        <webwork source="Library/FortLewis/Algebra/1-1-Expressions/MCH1-1-1-02-Expressions.pg" />
      </exercise>

      <exercise permid="oTx">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate140.pg" />
      </exercise>

      <exercise permid="VaG">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate140.pg" />
      </exercise>

      <exercise permid="BhP">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate150.pg" />
      </exercise>

      <exercise permid="hoY">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluate150.pg" />
      </exercise>

      <exercise permid="lYR">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Algebraic_Expns_Slope.pg" />
      </exercise>

      <exercise permid="Sga">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Algebraic_Expns_Slope.pg" />
      </exercise>

      <exercise permid="ynj">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Algebraic_Expns_Distance.pg" />
      </exercise>

      <exercise permid="eus">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Algebraic_Expns_Distance.pg" />
      </exercise>

      <exercise permid="KBB">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Simplifying_Algebraic_Expressions_04.pg" />
      </exercise>

      <exercise permid="qIK">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Simplifying_Algebraic_Expressions_04.pg" />
      </exercise>

      <exercise permid="WPT">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Simplifying_Algebraic_Expressions_02.pg" />
      </exercise>

      <exercise permid="CXc">
        <webwork source="Library/Mizzou/College_Algebra/Real_Numbers/Simplifying_Expressions/Simplifying_Algebraic_Expressions_02.pg" />
      </exercise> -->

      <exercise permid="jel">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/FahrenheitCelsius10.pg" />
      </exercise>

      <exercise permid="Plu">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/FahrenheitCelsius10.pg" />
      </exercise>

      <!-- <exercise permid="HGV">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext10.pg" />
      </exercise>

      <exercise permid="nOe">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext10.pg" />
      </exercise>

      <exercise permid="TVn">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/EvaluateFormula30.pg" />
      </exercise>

      <exercise permid="Acw">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/EvaluateFormula30.pg" />
      </exercise> -->

      <exercise permid="gjF">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext20.pg" />
      </exercise>

      <exercise permid="MqO">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext20.pg" />
      </exercise>

      <!-- <exercise permid="sxX">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext30.pg" />
      </exercise>

      <exercise permid="YFg">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext30.pg" />
      </exercise>

      <exercise permid="EMp">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext50.pg" />
      </exercise>

      <exercise permid="kTy">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext50.pg" />
      </exercise>

      <exercise permid="RaH">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext40.pg" />
      </exercise>

      <exercise permid="xhQ">
        <webwork source="Contrib/PCC/BasicAlgebra/EvaluateExpressions/evaluateInContext40.pg" />
      </exercise> -->
    </exercisegroup>

    <exercisegroup>
      <title>Combining Like Terms</title>
      <exercise permid="xZj">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="fOO">
                Count the number of terms in each expression.

                <ol label="a." permid="CnD">
                  <li permid="unF">
                    <p permid="MTZ">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="tbi">
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>

                  <li permid="auO">
                    <p permid="Zir">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="FpA">
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>

                  <li permid="GBX">
                    <p permid="lwJ">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="RDS">
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>

                  <li permid="mJg">
                    <p permid="xLb">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="dSk">
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="eQm">
              <p permid="cko">
                <ol label="a." permid="Ayq">
                  <li permid="SQp">
                    <p permid="JZt">
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="yXy">
                    <p permid="qgC">
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="feH">
                    <p permid="WnL">
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="LlQ">
                    <p permid="CuU">
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="egs">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="LVX">
                Count the number of terms in each expression.

                <ol label="a." permid="iuM">
                  <li permid="rsZ">
                    <p permid="iCd">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="OJm">
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>

                  <li permid="XAi">
                    <p permid="uQv">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="aXE">
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>

                  <li permid="DHr">
                    <p permid="HeN">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="nlW">
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>

                  <li permid="jOA">
                    <p permid="Ttf">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="zAo">
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="KXv">
              <p permid="Irx">
                <ol label="a." permid="gFz">
                  <li permid="PVJ">
                    <p permid="fHx">
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="wcS">
                    <p permid="LOG">
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="ckb">
                    <p permid="rVP">
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="Irk">
                    <p permid="YcY">
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <!-- decimal coefficients -->
      <!-- <exercise permid="KnB">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="sdg">
                Count the number of terms in each expression.

                <ol label="a." permid="OBV">
                  <li permid="oyt">
                    <p permid="Ekh">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="krq">
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>

                  <li permid="UFC">
                    <p permid="Qyz">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="wFI">
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>

                  <li permid="AML">
                    <p permid="cMR">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="IUa">
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>

                  <li permid="gTU">
                    <p permid="pbj">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Vis">
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="reE">
              <p permid="oyG">
                <ol label="a." permid="MMI">
                  <li permid="Nbd">
                    <p permid="BpB">
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="tim">
                    <p permid="hwK">
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="Zpv">
                    <p permid="NDT">
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="FwE">
                    <p permid="tLc">
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="quK">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @answer = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$answer[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="Ykp">
                Count the number of terms in each expression.

                <ol label="a." permid="uJe">
                  <li permid="lDN">
                    <p permid="ZSl">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="FZu">
                      <var name="$answer[0]" width="25" />
                    </p>
                  </li>

                  <li permid="RKW">
                    <p permid="mgD">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="SnM">
                      <var name="$answer[1]" width="25" />
                    </p>
                  </li>

                  <li permid="xSf">
                    <p permid="yuV">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="eCe">
                      <var name="$answer[2]" width="25" />
                    </p>
                  </li>

                  <li permid="dZo">
                    <p permid="KJn">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="qQw">
                      <var name="$answer[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="XlN">
              <p permid="UFP">
                <ol label="a." permid="sTR">
                  <li permid="Kgx">
                    <p permid="WXF">
                      This expression has <m><var name="$answer[0]" /></m> terms.
                    </p>
                  </li>

                  <li permid="qnG">
                    <p permid="DeO">
                      This expression has <m><var name="$answer[1]" /></m> terms.
                    </p>
                  </li>

                  <li permid="WuP">
                    <p permid="jlX">
                      This expression has <m><var name="$answer[2]" /></m> terms.
                    </p>
                  </li>

                  <li permid="CBY">
                    <p permid="Ptg">
                      This expression has <m><var name="$answer[3]" /></m> terms.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise> -->
      <!-- List terms -->
      <!-- <exercise permid="WBT">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="Ery">
                List the terms in each expression.

                <ol label="a." permid="aQn">
                  <li permid="iJh">
                    <p permid="vAp">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="bHy">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="OQq">
                    <p permid="HOH">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="nVQ">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="uXz">
                    <p permid="UcZ">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Aki">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="beI">
                    <p permid="grr">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="MyA">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="DsW">
              <p permid="AMY">
                <ol label="a." permid="Zba">
                  <li permid="HlR">
                    <p permid="sFJ">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="nta">
                    <p permid="YMS">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="TAj">
                    <p permid="EUb">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="zHs">
                    <p permid="lbk">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="CJc">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="kyH">
                List the terms in each expression.

                <ol label="a." permid="GXw">
                  <li permid="fOB">
                    <p permid="Rit">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="xpC">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="LVK">
                    <p permid="dwL">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="JDU">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="scT">
                    <p permid="pLd">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="VSm">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="Ykc">
                    <p permid="BZv">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="igE">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="jAf">
              <p permid="gUh">
                <ol label="a." permid="Fij">
                  <li permid="Erl">
                    <p permid="OnN">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="kyu">
                    <p permid="uuW">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="QFD">
                    <p permid="aCf">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="wMM">
                    <p permid="GJo">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise> -->
      <!-- decimal coefficients -->
      <exercise permid="iQl">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="QFQ">
                List the terms in each expression.

                <ol label="a." permid="neF">
                  <li permid="cTV">
                    <p permid="mQx">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="SXG">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Jbe">
                    <p permid="zeP">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="flY">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="pin">
                    <p permid="Lth">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="rAq">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="Vpw">
                    <p permid="XHz">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="DOI">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="PHo">
              <p permid="Nbq">
                <ol label="a." permid="lps">
                  <li permid="BwF">
                    <p permid="jVR">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="hDO">
                    <p permid="Qda">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="NKX">
                    <p permid="wkj">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="tSg">
                    <p permid="crs">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="OXu">
        <webwork>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="wMZ">
                List the terms in each expression.

                <ol label="a." permid="TlO">
                  <li permid="ZZp">
                    <p permid="IyB">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="oFK">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Ggy">
                    <p permid="UMT">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="AUc">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="mnH">
                    <p permid="hbl">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Niu">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="SuQ">
                    <p permid="tpD">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="ZwM">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="vOx">
              <p permid="tiz">
                <ol label="a." permid="RwB">
                  <li permid="yBZ">
                    <p permid="FDV">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="eJi">
                    <p permid="lLe">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="KQr">
                    <p permid="RSn">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="qXA">
                    <p permid="xZw">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>
      <!-- fraction coefficients -->
      <!-- <exercise permid="veD">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="cUi">
                List the terms in each expression.

                <ol label="a." permid="zsX">
                  <li permid="XeJ">
                    <p permid="egF">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="KnO">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="DlS">
                    <p permid="quX">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="WCg">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="jtb">
                    <p permid="CJp">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="iQy">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="PAk">
                    <p permid="OXH">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="veQ">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="bVG">
              <p permid="ZpI">
                <ol label="a." permid="xDK">
                  <li permid="vHt">
                    <p permid="blZ">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="bOC">
                    <p permid="Hti">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="HVL">
                    <p permid="nAr">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="ocU">
                    <p permid="THA">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="blM">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                @termcount = (1,2,2,3,3,4,4)[NchooseK(7,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    $answers[$i] = List();
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random('x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $string = non_zero_random(-9,9,0.1).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+ $string")->reduce->reduce;
                        $answers[$i] = List($answers[$i]->value,Formula("$string")->reduce->reduce);
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
            </pg-code>
            </setup>
            <statement>
              <p permid="Jbr">
                List the terms in each expression.

                <ol label="a." permid="LHp">
                  <li permid="Ukd">
                    <p permid="zOJ">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="fVS">
                      <var name="$answers[0]" width="25" />
                    </p>
                  </li>

                  <li permid="Arm">
                    <p permid="Mdb">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="skk">
                      <var name="$answers[1]" width="25" />
                    </p>
                  </li>

                  <li permid="gyv">
                    <p permid="Yrt">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="EyC">
                      <var name="$answers[2]" width="25" />
                    </p>
                  </li>

                  <li permid="MFE">
                    <p permid="kFL">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="QMU">
                      <var name="$answers[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
            <solution permid="IcP">
              <p permid="FwR">
                <ol label="a." permid="dKT">
                  <li permid="sMN">
                    <p permid="wUd">
                      The terms are <m><var name="$answers[0]" /></m>.
                    </p>
                  </li>

                  <li permid="YTW">
                    <p permid="dbm">
                      The terms are <m><var name="$answers[1]" /></m>.
                    </p>
                  </li>

                  <li permid="Fbf">
                    <p permid="Jiv">
                      The terms are <m><var name="$answers[2]" /></m>.
                    </p>
                  </li>

                  <li permid="lio">
                    <p permid="ppE">
                      The terms are <m><var name="$answers[3]" /></m>.
                    </p>
                  </li>
                </ol>
              </p>
            </solution>
        </webwork>
      </exercise> -->

      <!-- fraction coefficients -->
      <exercise permid="Eyp">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $answers[$i] = Formula("$answers[$i]")->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroMul=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroMul=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="jto">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="PAx">
                <ol label="a." permid="oTS">
                  <li permid="FKZ">
                    <p permid="ynR">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="eva">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="lSi">
                    <p permid="KCj">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="qJs">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="RZr">
                    <p permid="WQB">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="CXK">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="ygA">
                    <p permid="jeT">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Pmc">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>

      <exercise permid="kFy">
        <webwork>
            <setup>

            <pg-code>
                Context("Fraction");
                Context()->noreduce('(-x)+y','(-x)-y');
                Context()->flags->set(reduceConstants=>0);
                Context()->variables->are(x=>'Real',y=>'Real',z=>'Real',t=>'Real',s=>'Real');
                Context()->operators->set(
                    '*' => {class => 'bizarro::BOP::multiply', isCommand => 1},
                );
                @termcount = (2,2,2,3,3,3,4,4)[NchooseK(8,4)];
                for $i (0..3) {
                    $expression[$i] = Formula("0");
                    my @vars;
                    my @exps;
                    for $j (1..$termcount[$i]) {
                        my $nextvar = list_random(@vars,@vars,@vars,'x','y','z','t','s');
                        my $nextexp;
                        do {$nextexp = list_random(@exps,@exps,@exps,0,1,1,1,2,2);} until ($exps[$j-2] != 0 or $nextexp != 0);
                        push(@vars,$nextvar);
                        push(@exps,$nextexp);
                        $string = Fraction(non_zero_random(-9,9,1),non_zero_random(-9,9,1)).$vars[$j-1].'^'.$exps[$j-1];
                        $expression[$i] = Compute("$expression[$i]+$string")->reduce->reduce;
                    }
                }
                $exp0=$expression[0];
                $exp1=$expression[1];
                $exp2=$expression[2];
                $exp3=$expression[3];
                for $i (0..3) {
                    $answers[$i] = Formula(Fraction($expression[$i]->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'+'.
                            Fraction($expression[$i]->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'x+'.
                            Fraction($expression[$i]->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'y+'.
                            Fraction($expression[$i]->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'z+'.
                            Fraction($expression[$i]->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'s+'.
                            Fraction($expression[$i]->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'t+'.
                            Fraction($expression[$i]->D('x')->D('x')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2x^2+'.
                            Fraction($expression[$i]->D('y')->D('y')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2y^2+'.
                            Fraction($expression[$i]->D('z')->D('z')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2z^2+'.
                            Fraction($expression[$i]->D('s')->D('s')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2s^2+'.
                            Fraction($expression[$i]->D('t')->D('t')->eval(x=>0,y=>0,z=>0,t=>0,s=>0)).'/2t^2')->reduce->reduce;
                    $answers[$i] = Formula("$answers[$i]")->reduce;
                    $evaluator[$i] = $answers[$i] -> cmp(
                       checker=>sub{
                          my ( $correct, $student, $ansHash ) = @_;
                          return 0 if $ansHash->{isPreview} || $correct != $student;
                          $student = $ansHash->{student_formula};
                          $correct = $correct->{original_formula} if defined $correct->{original_formula};
                          $student = Formula("$student"); $correct = Formula("$correct");
                          return 0 unless ($correct == $student);
                          Context()->flags->set(bizarroMul=>1);
                          delete $correct->{test_values}, $student->{test_values};
                          my $OK = (($correct == $student) or ($student == $correct));
                          Context()->flags->set(bizarroMul=>0);
                          Value::Error("Your answer is not in the expected form. It might not be fully simplified.") unless $OK;
                          return $OK;
                    });
                }
            </pg-code>
            </setup>
            <statement>
              <p permid="vHG">
                Simplify each expression, if possible, by combining like terms.
              </p>
              <instruction>
                If the expression cannot be simplified further, just enter it as it is.
              </instruction>
              <p permid="bOP">
                <ol label="a." permid="Vbb">
                  <li permid="enJ">
                    <p permid="vtl">
                      <m><var name="$exp0" /></m>
                    </p>

                    <p permid="bAu">
                      <var name="$evaluator[0]" width="25" />
                    </p>
                  </li>

                  <li permid="KuS">
                    <p permid="HHD">
                      <m><var name="$exp1" /></m>
                    </p>

                    <p permid="nOM">
                      <var name="$evaluator[1]" width="25" />
                    </p>
                  </li>

                  <li permid="qCb">
                    <p permid="TVV">
                      <m><var name="$exp2" /></m>
                    </p>

                    <p permid="Ade">
                      <var name="$evaluator[2]" width="25" />
                    </p>
                  </li>

                  <li permid="WJk">
                    <p permid="gkn">
                      <m><var name="$exp3" /></m>
                    </p>

                    <p permid="Mrw">
                      <var name="$evaluator[3]" width="25" />
                    </p>
                  </li>
                </ol>
              </p>
            </statement>
        </webwork>
      </exercise>
    </exercisegroup>

    <exercisegroup>
      <title>Comparison Symbols and Notation for Intervals</title>

      <exercise permid="JpM">
        <webwork >
        <setup>

            <pg-code>
                #randomizes from 12, only presents 6
                ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
                Context("Fraction");
                Context()->flags->set(reduceFractions=>0);
                for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                    $ld[$i]=random(2,9,1);
                    $left[$i]=Fraction($ln[$i],$ld[$i]);
                    $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
                for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                    $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                    $rd[$i]=random(2,9,1);
                    $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
                @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                @j=NchooseK(12,12);
                @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
                $True=PopUp(["?","True","False"],"True");
                $False=PopUp(["?","True","False"],"False");
                for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
        </setup>
        <statement>
          <p permid="yoe">
            Decide if each comparison is true or false.

            <ol permid="hwX">
              <li permid="RiG">
                <p permid="Htv">
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </li>

              <li permid="xpP">
                <p permid="nAE">
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </li>

              <li permid="dwY">
                <p permid="THN">
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </li>

              <li permid="JEh">
                <p permid="zOW">
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </li>

              <li permid="pLq">
                <p permid="fWf">
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </li>

              <li permid="VSz">
                <p permid="Mdo">
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </li>
            </ol>
          </p>
        </statement>
        </webwork>
      </exercise>

      <exercise permid="pwV">
        <webwork >
        <setup>

            <pg-code>
                #randomizes from 12, only presents 6
                ($ln[1],$ln[3],$ln[5],$ln[7],$ln[9],$ln[11])=map{$_-10}(NchooseK(20,6));
                Context("Fraction");
                Context()->flags->set(reduceFractions=>0);
                for my$i(1,3,5,7,9,11){$g[$i]=random(1,3,1);
                    $ld[$i]=random(2,9,1);
                    $left[$i]=Fraction($ln[$i],$ld[$i]);
                    $right[$i]=Fraction($ln[$i]*$g[$i],$ld[$i]*$g[$i])};
                for my$i(0,2,4,6,8,10){$ld[$i]=random(2,9,1);
                    $left[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$ld[$i]+random(1,$ld[$i]-1,1),$ld[$i]);
                    $rd[$i]=random(2,9,1);
                    $right[$i]=random(-1,1,2)*Fraction(random(1,9,1)*$rd[$i]+random(1,$rd[$i]-1,1),$rd[$i]);};
                @comp=("=","=","\gt","\gt","\geq","\geq","\lt","\lt","\leq","\leq","\neq","\neq");
                @j=NchooseK(12,12);
                @statement=map{$left[$j[$_]]->TeX.$comp[$j[$_]].$right[$j[$_]]->TeX}(0..11);
                $True=PopUp(["?","True","False"],"True");
                $False=PopUp(["?","True","False"],"False");
                for my$i(0..1){$tf[$i]=($left[$i]==$right[$i])?$True:$False;};
                for my$i(2..3){$tf[$i]=($left[$i]>$right[$i])?$True:$False;};
                for my$i(4..5){$tf[$i]=($left[$i]>=$right[$i])?$True:$False;};
                for my$i(6..7){$tf[$i]=($left[$i]&lt;$right[$i])?$True:$False;};
                for my$i(8..9){$tf[$i]=($left[$i]&lt;=$right[$i])?$True:$False;};
                for my$i(10..11){$tf[$i]=($left[$i]!=$right[$i])?$True:$False;};
                for my$i(0..11){$TF[$i]=$tf[$j[$i]];};
            </pg-code>
        </setup>
        <statement>
          <p permid="evn">
            Decide if each comparison is true or false.

            <ol permid="NEg">
              <li permid="BZI">
                <p permid="skx">
                  <m><var name="$statement[0]" /></m> <var name="$TF[0]" form="popup"/>
                </p>
              </li>

              <li permid="igR">
                <p permid="YrG">
                  <m><var name="$statement[1]" /></m> <var name="$TF[1]" form="popup"/>
                </p>
              </li>

              <li permid="Ooa">
                <p permid="EyP">
                  <m><var name="$statement[2]" /></m> <var name="$TF[2]" form="popup"/>
                </p>
              </li>

              <li permid="uvj">
                <p permid="kFY">
                  <m><var name="$statement[3]" /></m> <var name="$TF[3]" form="popup"/>
                </p>
              </li>

              <li permid="aCs">
                <p permid="QNh">
                  <m><var name="$statement[4]" /></m> <var name="$TF[4]" form="popup"/>
                </p>
              </li>

              <li permid="GJB">
                <p permid="wUq">
                  <m><var name="$statement[5]" /></m> <var name="$TF[5]" form="popup"/>
                </p>
              </li>
            </ol>
          </p>
        </statement>
        </webwork>
      </exercise>


      <exercise permid="hSw">
        <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
      </exercise>

      <exercise permid="NZF">
        <webwork  source="Contrib/PCC/BasicAlgebra/ComparisonsAndBasicInequalities/CompareFractionOperations20.pg" />
      </exercise>

      <exercise permid="rmi">
        <webwork>
          <setup>

            <pg-code>
                ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                %right=(oi=>')',ci=>')',io=>')',ic=>']');
                @type=('oi','ci','io','ic')[NchooseK(4,3)];
                @ticks = ();
                for my $j (-5..5) {push(@ticks,$j);};
                for my$i(0,1,2){
                $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(5.5,0,'black',1);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(-5.5,0,'black',1);
                $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
                for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
                $nl[$i]->h_ticks(0,'black',@ticks);
                };
                $shadingoffset = 0.5;
                for my$i(0..2){
                if($type[$i]eq'oi' or $type[$i]eq'ci'){
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
                }else{
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
                };
                if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                  elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                  elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                  else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
                };

                InequalitySetBuilder::UseVerticalSuchThat();
                Context("InequalitySetBuilder-Only");
                for my$i(0..2){
                if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                };

                Context("Interval");
                Context()->flags->set("formatStudentAnswer"=>'parsed');
                for my$i(0..2){
                if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                else{$in[$i]=Compute("(-inf,$b[$i]]");}
                };
            </pg-code>
          </setup>
          <statement>
            <p permid="KCw">
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p permid="qJF">
              <ol label="a." cols="3" permid="tLp">
                <li permid="mQK">

                  <sidebyside margins="0%" widths="40%" permid="FLm">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>

                  <p permid="dbz">
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>

                  <p permid="JiI">
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>

                <li permid="SXT">

                  <sidebyside margins="0%" widths="40%" permid="lSv">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>

                  <p permid="ppR">
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>

                  <p permid="Vxa">
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>

                <li permid="zfc">

                  <sidebyside margins="0%" widths="40%" permid="RZE">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>

                  <p permid="BEj">
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>

                  <p permid="hLs">
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
        </webwork>
      </exercise>

      <exercise permid="Xtr">
        <webwork>
          <setup>

            <pg-code>
                ($a[0],$b[0])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[1],$b[1])=num_sort(map{$_-4}NchooseK(9,2));
                ($a[2],$b[2])=num_sort(map{$_-4}NchooseK(9,2));
                %left=(oi=>'(',ci=>'[',io=>'(',ic=>'(');
                %right=(oi=>')',ci=>')',io=>')',ic=>']');
                @type=('oi','ci','io','ic')[NchooseK(4,3)];
                @ticks = ();
                for my $j (-5..5) {push(@ticks,$j);};
                for my$i(0,1,2){
                $nl[$i]=init_graph(-6,-1,6,1,size=>[240,32]);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(5.5,0,'black',1);
                $nl[$i]->moveTo(0,0);
                $nl[$i]->arrowTo(-5.5,0,'black',1);
                $nl[$i]->lb(new Label(6,-0.2,'x','black','right','top','large'));
                for my$j(@ticks){$nl[$i]->lb(new Label($j,-0.2,$j,'black','center','top','large'));};
                $nl[$i]->h_ticks(0,'black',@ticks);
                };
                $shadingoffset = 0.5;
                for my$i(0..2){
                if($type[$i]eq'oi' or $type[$i]eq'ci'){
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->lineTo(5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($a[$i],$shadingoffset);
                  $nl[$i]->arrowTo(5.5,$shadingoffset,'blue',1);
                }else{
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->lineTo(-5.25,$shadingoffset,'blue',1);
                  $nl[$i]->moveTo($b[$i],$shadingoffset);
                  $nl[$i]->arrowTo(-5.5,$shadingoffset,'blue',1);
                };
                if($type[$i]eq'oi'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'(','blue','center','middle','giant'));}
                  elsif($type[$i]eq'ci'){$nl[$i]->lb(new Label($a[$i],$shadingoffset,'[','blue','center','middle','giant'));}
                  elsif($type[$i]eq'io'){$nl[$i]->lb(new Label($b[$i],$shadingoffset,')','blue','center','middle','giant'));}
                  else{$nl[$i]->lb(new Label($b[$i],$shadingoffset,']','blue','center','middle','giant'));}
                };

                InequalitySetBuilder::UseVerticalSuchThat();
                Context("InequalitySetBuilder-Only");
                for my$i(0..2){
                if($type[$i]eq'oi'){$sb[$i]=Compute("{ x | x>$a[$i]}");}
                elsif($type[$i]eq'ci'){$sb[$i]=Compute("{ x | x>=$a[$i]}");}
                elsif($type[$i]eq'io'){$sb[$i]=Compute("{ x | x&lt;$b[$i]}");}
                else{$sb[$i]=Compute("{ x | x&lt;=$b[$i]}");}
                };

                Context("Interval");
                Context()->flags->set("formatStudentAnswer"=>'parsed');
                for my$i(0..2){
                if($type[$i]eq'oi'){$in[$i]=Compute("($a[$i],inf)");}
                elsif($type[$i]eq'ci'){$in[$i]=Compute("[$a[$i],inf)");}
                elsif($type[$i]eq'io'){$in[$i]=Compute("(-inf,$b[$i])");}
                else{$in[$i]=Compute("(-inf,$b[$i]]");}
                };
            </pg-code>
          </setup>
          <statement>
            <p permid="WQO">
              For each interval expressed in the number lines,
              give the interval notation and set-builder notation.
            </p>
            <instruction>
              Type <c>inf</c> or <c>infinity</c> for <m>\infty</m>,  <c>&gt;=</c> for <m>\geq</m>, and <c>&lt;=</c> for <m>\leq</m>.
            </instruction>
            <p permid="CXX">
              <ol label="a." cols="3" permid="ZSy">
                <li permid="fml">

                  <sidebyside margins="0%" widths="40%" permid="ygN">
                    <image pg-name="$nl[0]"/>
                  </sidebyside>

                  <p permid="NSB">
                    In set-builder notation: <var name="$sb[0]" width="20" />
                  </p>

                  <p permid="tZK">
                    In interval notation: <var name="$in[0]" width="20" />
                  </p>
                </li>

                <li permid="Ltu">

                  <sidebyside margins="0%" widths="40%" permid="enW">
                    <image pg-name="$nl[1]"/>
                  </sidebyside>

                  <p permid="agT">
                    In set-builder notation: <var name="$sb[1]" width="20" />
                  </p>

                  <p permid="Goc">
                    In interval notation: <var name="$in[1]" width="20" />
                  </p>
                </li>

                <li permid="rAD">

                  <sidebyside margins="0%" widths="40%" permid="Kvf">
                    <image pg-name="$nl[2]"/>
                  </sidebyside>

                  <p permid="mvl">
                    In set-builder notation: <var name="$sb[2]" width="20" />
                  </p>

                  <p permid="SCu">
                    In interval notation: <var name="$in[2]" width="20" />
                  </p>
                </li>
              </ol>
            </p>
          </statement>
        </webwork>
      </exercise>

      <!-- <exercise permid="DAA">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
      </exercise>

      <exercise permid="jHJ">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation10.pg" />
      </exercise>

      <exercise permid="POS">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
      </exercise>

      <exercise permid="vWb">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation20.pg" />
      </exercise>

      <exercise permid="cdk">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
      </exercise>

      <exercise permid="Ikt">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation30.pg" />
      </exercise>

      <exercise permid="orC">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
      </exercise>

      <exercise permid="UyL">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/GraphToSetAndIntervalNotation40.pg" />
      </exercise> -->

      <exercise permid="AFU">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
      </exercise>

      <exercise permid="gNd">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation10.pg" />
      </exercise>

      <!-- <exercise permid="MUm">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
      </exercise>

      <exercise permid="tbv">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation20.pg" />
      </exercise>

      <exercise permid="ZiE">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
      </exercise>

      <exercise permid="FpN">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation30.pg" />
      </exercise>

      <exercise permid="lwW">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
      </exercise>

      <exercise permid="REf">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation40.pg" />
      </exercise>

      <exercise permid="xLo">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
      </exercise>

      <exercise permid="dSx">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation50.pg" />
      </exercise>

      <exercise permid="JZG">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
      </exercise>

      <exercise permid="qgP">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation60.pg" />
      </exercise>

      <exercise permid="WnY">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
      </exercise>

      <exercise permid="Cvh">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation70.pg" />
      </exercise>

      <exercise permid="iCq">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
      </exercise>

      <exercise permid="OJz">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation80.pg" />
      </exercise>

      <exercise permid="uQI">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
      </exercise>

      <exercise permid="aXR">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation90.pg" />
      </exercise>

      <exercise permid="Hfa">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
      </exercise>

      <exercise permid="nmj">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation100.pg" />
      </exercise>

      <exercise permid="Tts">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation110.pg" />
      </exercise>

      <exercise permid="zAB">
        <webwork  source="Contrib/PCC/BasicAlgebra/LinearInequalities/IntervalNotation120.pg" />
      </exercise> -->
    </exercisegroup>

    <exercisegroup>
      <title>Equations and Inequalities as True/False Statements</title>

      <!-- <exercise permid="kOC">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ10.pg" />
      </exercise>

      <exercise permid="QVL">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ10.pg" />
      </exercise>

      <exercise permid="xcU">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ20.pg" />
      </exercise>

      <exercise permid="dkd">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ20.pg" />
      </exercise>

      <exercise permid="Jrm">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ30.pg" />
      </exercise>

      <exercise permid="pyv">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ30.pg" />
      </exercise> -->

      <exercise permid="VFE">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ40.pg" />
      </exercise>

      <exercise permid="BMN">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ40.pg" />
      </exercise>

      <!-- <exercise permid="hTW">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ50.pg" />
      </exercise>

      <exercise permid="Obf">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ50.pg" />
      </exercise>

      <exercise permid="uio">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ60.pg" />
      </exercise>

      <exercise permid="apx">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ60.pg" />
      </exercise>

      <exercise permid="GwG">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ70.pg" />
      </exercise>

      <exercise permid="mDP">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ70.pg" />
      </exercise> -->

      <exercise permid="SKY">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ80.pg" />
      </exercise>

      <exercise permid="ySh">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/solutionQ80.pg" />
      </exercise>

      <!-- <exercise permid="eZq">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/InequalitySolutionOrNot10.pg" />
      </exercise>

      <exercise permid="Lgz">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/InequalitySolutionOrNot10.pg" />
      </exercise>

      <exercise permid="rnI">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/InequalitySolutionOrNot20.pg" />
      </exercise>

      <exercise permid="XuR">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/InequalitySolutionOrNot20.pg" />
      </exercise>

      <exercise permid="DCa">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/InequalitySolutionOrNot30.pg" />
      </exercise>

      <exercise permid="jJj">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/InequalitySolutionOrNot30.pg" />
      </exercise>

      <exercise permid="PQs">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication10.pg" />
      </exercise>

      <exercise permid="vXB">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication10.pg" />
      </exercise> -->

      <exercise permid="ceK">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication40.pg" />
      </exercise>

      <exercise permid="IlT">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication40.pg" />
      </exercise>

      <!-- <exercise permid="otc">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication50.pg" />
      </exercise>

      <exercise permid="UAl">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication50.pg" />
      </exercise>

      <exercise permid="AHu">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication20.pg" />
      </exercise>

      <exercise permid="MVM">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication20.pg" />
      </exercise>

      <exercise permid="tcV">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication60.pg" />
      </exercise>

      <exercise permid="Zke">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication60.pg" />
      </exercise>

      <exercise permid="Frn">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication70.pg" />
      </exercise>

      <exercise permid="lyw">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication70.pg" />
      </exercise>

      <exercise permid="RFF">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication30.pg" />
      </exercise>

      <exercise permid="xMO">
        <webwork source="Contrib/PCC/BasicAlgebra/VerifySolutionsOneVariable/VerifySolutionApplication30.pg" />
      </exercise> -->
    </exercisegroup>

    <exercisegroup>
      <title>Solving One-Step Equations</title>
      <!-- <exercise permid="IXJ">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract10.pg" />
      </exercise>

      <exercise permid="peS">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract10.pg" />
      </exercise>

      <exercise permid="Vmb">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract20.pg" />
      </exercise>

      <exercise permid="Btk">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract20.pg" />
      </exercise>

      <exercise permid="hAt">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract30.pg" />
      </exercise>

      <exercise permid="NHC">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract30.pg" />
      </exercise>

      <exercise permid="tOL">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract40.pg" />
      </exercise>

      <exercise permid="ZVU">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract40.pg" />
      </exercise>

      <exercise permid="Gdd">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract50.pg" />
      </exercise>

      <exercise permid="mkm">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract50.pg" />
      </exercise> -->

      <exercise permid="Srv">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract60.pg" />
      </exercise>

      <exercise permid="yyE">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract60.pg" />
      </exercise>

      <!-- <exercise permid="eFN">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract80.pg" />
      </exercise>

      <exercise permid="KMW">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract80.pg" />
      </exercise>

      <exercise permid="qUf">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract90.pg" />
      </exercise>

      <exercise permid="Xbo">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract90.pg" />
      </exercise>

      <exercise permid="Dix">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract100.pg" />
      </exercise>

      <exercise permid="jpG">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract100.pg" />
      </exercise>

      <exercise permid="PwP">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract110.pg" />
      </exercise>

      <exercise permid="vDY">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract110.pg" />
      </exercise>

      <exercise permid="bLh">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract120.pg" />
      </exercise>

      <exercise permid="HSq">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract120.pg" />
      </exercise>

      <exercise permid="nZz">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract130.pg" />
      </exercise>

      <exercise permid="UgI">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract130.pg" />
      </exercise>

      <exercise permid="AnR">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract150.pg" />
      </exercise>

      <exercise permid="gva">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract150.pg" />
      </exercise> -->

      <exercise permid="MCj">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract160.pg" />
      </exercise>

      <exercise permid="sJs">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepAddSubtract160.pg" />
      </exercise>

      <!-- <exercise permid="YQB">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv10.pg" />
      </exercise>

      <exercise permid="EXK">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv10.pg" />
      </exercise>

      <exercise permid="leT">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv20.pg" />
      </exercise>

      <exercise permid="Rmc">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv20.pg" />
      </exercise>

      <exercise permid="xtl">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv40.pg" />
      </exercise>

      <exercise permid="dAu">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv40.pg" />
      </exercise>

      <exercise permid="JHD">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv50.pg" />
      </exercise>

      <exercise permid="pOM">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv50.pg" />
      </exercise>

      <exercise permid="VVV">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv80.pg" />
      </exercise>

      <exercise permid="Cde">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv80.pg" />
      </exercise>

      <exercise permid="ikn">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv100.pg" />
      </exercise>

      <exercise permid="Orw">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv100.pg" />
      </exercise>

      <exercise permid="uyF">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv110.pg" />
      </exercise>

      <exercise permid="aFO">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv110.pg" />
      </exercise>

      <exercise permid="GMX">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv120.pg" />
      </exercise>

      <exercise permid="mUg">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv120.pg" />
      </exercise>

      <exercise permid="Tbp">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv130.pg" />
      </exercise>

      <exercise permid="ziy">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv130.pg" />
      </exercise>

      <exercise permid="fpH">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveLinearEquationFraction210.pg" />
      </exercise>

      <exercise permid="LwQ">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveLinearEquationFraction210.pg" />
      </exercise>

      <exercise permid="rDZ">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveLinearEquationFraction220.pg" />
      </exercise>

      <exercise permid="XLi">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveLinearEquationFraction220.pg" />
      </exercise>

      <exercise permid="DSr">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveLinearEquationFraction230.pg" />
      </exercise>

      <exercise permid="jZA">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveLinearEquationFraction230.pg" />
      </exercise>

      <exercise permid="QgJ">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveProportion10.pg" />
      </exercise>

      <exercise permid="wnS">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveProportion10.pg" />
      </exercise>
 -->
      <exercise permid="cvb">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveProportion30.pg" />
      </exercise>

      <exercise permid="ICk">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/SolveProportion30.pg" />
      </exercise>

      <exercise permid="oJt">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare10.pg" />
      </exercise>

      <exercise permid="UQC">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare10.pg" />
      </exercise>

      <exercise permid="AXL">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare20.pg" />
      </exercise>

      <exercise permid="heU">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepCompare20.pg" />
      </exercise>

      <!-- <exercise permid="Nmd">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv30.pg" />
      </exercise>

      <exercise permid="ttm">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv30.pg" />
      </exercise>

      <exercise permid="ZAv">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv70.pg" />
      </exercise>

      <exercise permid="FHE">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv70.pg" />
      </exercise> -->

      <exercise permid="lON">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv90.pg" />
      </exercise>

      <exercise permid="RVW">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv90.pg" />
      </exercise>

      <!-- <exercise permid="ydf">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv180.pg" />
      </exercise>

      <exercise permid="eko">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv180.pg" />
      </exercise>

      <exercise permid="Krx">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv190.pg" />
      </exercise>

      <exercise permid="qyG">
        <webwork source="Contrib/PCC/BasicAlgebra/SolveLinearEquations/solveLinearEqnOneStepMultiDiv190.pg" />
      </exercise> -->
    </exercisegroup>

    <exercisegroup>
      <title>Solving One-Step Inequalities</title>
        <!-- <exercise permid="wvj">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality10.pg" />
        </exercise>
        <exercise permid="cCs">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality10.pg" />
        </exercise>
        <exercise permid="IJB">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality20.pg"/>
        </exercise>
        <exercise permid="oQK">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality20.pg"/>
        </exercise>
        <exercise permid="UXT">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality30.pg"/>
        </exercise>
        <exercise permid="Bfc">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality30.pg"/>
        </exercise> -->
        <exercise permid="hml">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality41.pg"/>
        </exercise>
        <exercise permid="Ntu">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality41.pg"/>
        </exercise>

        <exercise permid="tAD">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality50.pg" />
        </exercise>
        <exercise permid="ZHM">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality50.pg" />
        </exercise>
        <!-- <exercise permid="FOV">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality60.pg" />
        </exercise>
        <exercise permid="lWe">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality60.pg" />
        </exercise> -->
        <exercise permid="Sdn">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality70.pg" />
        </exercise>
        <exercise permid="ykw">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality70.pg" />
        </exercise>
        <!-- <exercise permid="erF">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality80.pg" />
        </exercise>
        <exercise permid="KyO">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality80.pg" />
        </exercise>
        <exercise permid="qFX">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality90.pg" />
        </exercise>
        <exercise permid="WNg">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality90.pg" />
        </exercise>
        <exercise permid="CUp">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality100.pg" />
        </exercise>
        <exercise permid="jby">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality100.pg" />
        </exercise> -->
        <exercise permid="PiH">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality110.pg" />
        </exercise>
        <exercise permid="vpQ">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality110.pg" />
        </exercise>
        <exercise permid="bwZ">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality120.pg" />
        </exercise>
        <exercise permid="HEi">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality120.pg" />
        </exercise>
        <!-- <exercise permid="nLr">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality130.pg" />
        </exercise>
        <exercise permid="TSA">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality130.pg" />
        </exercise>
        <exercise permid="zZJ">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality140.pg" />
        </exercise>
        <exercise permid="ggS">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality140.pg" />
        </exercise>
        <exercise permid="Mob">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality150.pg" />
        </exercise>
        <exercise permid="svk">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality150.pg" />
        </exercise>
        <exercise permid="YCt">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality160.pg" />
        </exercise>
        <exercise permid="EJC">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequality160.pg" />
        </exercise>
        <exercise permid="kQL">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequalityWithFraction40.pg" />
        </exercise>
        <exercise permid="QXU">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequalityWithFraction40.pg" />
        </exercise>
        <exercise permid="xfd">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequalityWithFraction50.pg" />
        </exercise>
        <exercise permid="dmm">
          <webwork source="Contrib/PCC/BasicAlgebra/LinearInequalities/SolveInequalityWithFraction50.pg" />
        </exercise> -->
    </exercisegroup>

    <exercisegroup>
      <title>Algebraic Properties and Simplifying Expressions</title>
      <exercise permid="ctO">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses10.pg" />
      </exercise>

      <exercise permid="IAX">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses10.pg" />
      </exercise>

      <exercise permid="oIg">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses20.pg" />
      </exercise>

      <exercise permid="UPp">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/inverses20.pg" />
      </exercise>

      <exercise permid="AWy">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition10.pg" />
      </exercise>

      <exercise permid="hdH">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition10.pg" />
      </exercise>

      <!-- <exercise permid="NkQ">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition20.pg" />
      </exercise>

      <exercise permid="trZ">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition20.pg" />
      </exercise> -->

      <exercise permid="Zzi">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyMultiplication10.pg" />
      </exercise>

      <exercise permid="FGr">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyMultiplication10.pg" />
      </exercise>

      <!-- <exercise permid="lNA">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition10.pg" />
      </exercise>

      <exercise permid="RUJ">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition10.pg" />
      </exercise> -->

      <exercise permid="ybS">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition20.pg" />
      </exercise>

      <exercise permid="ejb">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition20.pg" />
      </exercise>

      <!-- <exercise permid="Kqk">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition30.pg" />
      </exercise>

      <exercise permid="qxt">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyAddition30.pg" />
      </exercise> -->

      <exercise permid="WEC">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication10.pg" />
      </exercise>

      <exercise permid="CLL">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication10.pg" />
      </exercise>

      <!-- <exercise permid="iSU">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication20.pg" />
      </exercise>

      <exercise permid="Pad">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication20.pg" />
      </exercise>

      <exercise permid="vhm">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication30.pg" />
      </exercise>

      <exercise permid="bov">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/CommutativePropertyMultiplication30.pg" />
      </exercise> -->

      <exercise permid="HvE">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty10.pg" />
      </exercise>

      <exercise permid="nCN">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty10.pg" />
      </exercise>

      <!-- <exercise permid="TJW">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty20.pg" />
      </exercise>

      <exercise permid="zRf">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty20.pg" />
      </exercise>

      <exercise permid="fYo">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty30.pg" />
      </exercise>

      <exercise permid="Mfx">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty30.pg" />
      </exercise>

      <exercise permid="smG">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty40.pg" />
      </exercise>

      <exercise permid="YtP">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty40.pg" />
      </exercise> -->

      <exercise permid="EAY">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty50.pg" />
      </exercise>

      <exercise permid="kIh">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty50.pg" />
      </exercise>

      <!-- <exercise permid="QPq">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty60.pg" />
      </exercise>

      <exercise permid="wWz">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty60.pg" />
      </exercise>

      <exercise permid="ddI">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty70.pg" />
      </exercise>

      <exercise permid="JkR">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty70.pg" />
      </exercise>

      <exercise permid="psa">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty80.pg" />
      </exercise>

      <exercise permid="Vzj">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty80.pg" />
      </exercise>

      <exercise permid="BGs">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty90.pg" />
      </exercise>

      <exercise permid="hNB">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty90.pg" />
      </exercise>


      <exercise permid="NUK">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition30.pg" />
      </exercise>

      <exercise permid="ubT">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/AssociativePropertyAddition30.pg" />
      </exercise>

      <exercise permid="aSW">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty21.pg" />
      </exercise>

      <exercise permid="Haf">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty21.pg" />
      </exercise>

      <exercise permid="nho">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty22.pg" />
      </exercise>

      <exercise permid="Tox">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty22.pg" />
      </exercise>

      <exercise permid="zvG">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty41.pg" />
      </exercise>

      <exercise permid="fCP">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty41.pg" />
      </exercise> -->

      <exercise permid="LJY">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty51.pg" />
      </exercise>

      <exercise permid="rRh">
        <webwork source="Contrib/PCC/BasicAlgebra/AlgebraicProperties/DistributiveProperty51.pg" />
      </exercise>

      <exercise permid="wBa">
        <webwork>
            <pg-macros><macro-file>contextLimitedPolynomial.pl</macro-file></pg-macros>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->reduction->set('(-x)-y'=>0);
                Context()->reduction->set('(-x)+y'=>0);
                @a=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
                @b=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
                $left=Formula("$a[0]($a[1]x+$a[2])");
                $right=Formula("$b[0]($b[1]x+$b[2])");
                $unsimplified=$left+$right;
                $unsimplified=$unsimplified->reduce;
                $simplified=Formula("($a[0]*$a[1]+$b[0]*$b[1])*x+($a[0]*$a[2]+$b[0]*$b[2])")->reduce;
                $leftdist=Formula("$a[0]*$a[1]x+$a[0]*$a[2]")->reduce;
                $rightdist=Formula("$b[0]*$b[1]x+$b[0]*$b[2]")->reduce;
                $termsrearranged=Formula("$a[0]*$a[1]x+$b[0]*$b[1]x+$a[0]*$a[2]+$b[0]*$b[2]")->reduce;
                Context("LimitedPolynomial-Strict");
                Context()->reduction->set('(-x)-y'=>0);
                Context()->reduction->set('(-x)+y'=>0);
                $simplified=Formula("$simplified");
            </pg-code>
            </setup>
            <statement>
              <p permid="exJ">
                Fully simplify <m><var name="$unsimplified" /></m>.
              </p>

              <p permid="KES">
                <var name="$simplified" width="15" />
              </p>
            </statement>
            <solution permid="Poy">
              <p permid="JUY">
                <md permid="TDf">
                  <mrow><var name="$unsimplified" />\amp=<var name="$leftdist" />+<var name="$rightdist" /></mrow>
                  <mrow>\amp=<var name="$termsrearranged" /></mrow>
                  <mrow>\amp=<var name="$simplified" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>

      <exercise permid="cIj">
        <webwork>
            <pg-macros><macro-file>contextLimitedPolynomial.pl</macro-file></pg-macros>
            <setup>

            <pg-code>
                Context("Numeric");
                Context()->reduction->set('(-x)-y'=>0);
                Context()->reduction->set('(-x)+y'=>0);
                @a=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
                @b=map{($_+1)*random(-1,1,2)}(NchooseK(9,3));
                $left=Formula("$a[0]($a[1]x+$a[2])");
                $right=Formula("$b[0]($b[1]x+$b[2])");
                $unsimplified=$left+$right;
                $unsimplified=$unsimplified->reduce;
                $simplified=Formula("($a[0]*$a[1]+$b[0]*$b[1])*x+($a[0]*$a[2]+$b[0]*$b[2])")->reduce;
                $leftdist=Formula("$a[0]*$a[1]x+$a[0]*$a[2]")->reduce;
                $rightdist=Formula("$b[0]*$b[1]x+$b[0]*$b[2]")->reduce;
                $termsrearranged=Formula("$a[0]*$a[1]x+$b[0]*$b[1]x+$a[0]*$a[2]+$b[0]*$b[2]")->reduce;
                Context("LimitedPolynomial-Strict");
                Context()->reduction->set('(-x)-y'=>0);
                Context()->reduction->set('(-x)+y'=>0);
                $simplified=Formula("$simplified");
            </pg-code>
            </setup>
            <statement>
              <p permid="qMb">
                Fully simplify <m><var name="$unsimplified" /></m>.
              </p>

              <p permid="WTk">
                <var name="$simplified" width="15" />
              </p>
            </statement>
            <solution permid="vvH">
              <p permid="qch">
                <md permid="zKo">
                  <mrow><var name="$unsimplified" />\amp=<var name="$leftdist" />+<var name="$rightdist" /></mrow>
                  <mrow>\amp=<var name="$termsrearranged" /></mrow>
                  <mrow>\amp=<var name="$simplified" /></mrow>
                </md>
              </p>
            </solution>
        </webwork>
      </exercise>
    </exercisegroup>

    <exercisegroup>
      <title>Modeling with Equations and Inequalities</title>

      <exercise permid="mnq">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation20.pg" />
      </exercise>

      <exercise permid="Suz">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation20.pg" />
      </exercise>

      <exercise permid="yBI">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation30.pg" />
      </exercise>

      <exercise permid="eIR">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation30.pg" />
      </exercise>

      <exercise permid="jsK">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation60.pg" />
      </exercise>

      <exercise permid="PzT">
        <webwork source="Contrib/PCC/BasicAlgebra/LinearEquationApplications/ModelingWithEquation60.pg" />
      </exercise>

      <exercise permid="zlC">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath65.pg" />
      </exercise>

      <exercise permid="fsL">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath65.pg" />
      </exercise>

      <exercise permid="LzU">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath70.pg" />
      </exercise>

      <exercise permid="rHd">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath70.pg" />
      </exercise>

      <exercise permid="hhY">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath110.pg" />
      </exercise>

      <exercise permid="Nph">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath110.pg" />
      </exercise>

      <exercise permid="FKI">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath130.pg" />
      </exercise>

      <exercise permid="lRR">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath130.pg" />
      </exercise>

      <exercise permid="CQc">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath170.pg" />
      </exercise>

      <exercise permid="iXl">
        <webwork source="Contrib/PCC/BasicAlgebra/EnglishToMath/englishToMath170.pg" />
      </exercise>

    </exercisegroup>
  </exercises>
</section>

